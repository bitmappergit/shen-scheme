{"name":"Chibi-shen","tagline":"Shen implementation on top of chibi-scheme","body":"chibi-shen, a chibi-scheme port of the Shen language\r\n====================================================\r\n\r\n* [Shen](http://shenlanguage.org)\r\n* [chibi-scheme](http://code.google.com/p/chibi-scheme>)\r\n* [chibi-shen](https://github.com/tizoc/chibi-shen)\r\n\r\nShen is a portable functional programming language by [Mark Tarver](http://marktarver.com) that offers\r\n\r\n- pattern matching,\r\n- λ calculus consistency,\r\n- macros,\r\n- optional lazy evaluation,\r\n- static type checking,\r\n- an integrated fully functional Prolog,\r\n- and an inbuilt compiler-compiler.\r\n\r\nBuilding\r\n--------\r\n\r\nTo precompile the `.kl` files into Scheme code run:\r\n\r\n    make\r\n\r\nThe resulting code will live under the `shen/compiled/` directory.\r\n  \r\nRunning\r\n-------\r\n\r\nVersion 0.7 of chibi-scheme is needed to run chibi-shen. Other versions may work, but testing and development are done against that version.\r\n\r\nTo launch the Shen REPL do:\r\n\r\n    chibi-scheme -Rshen.runner\r\n\r\nTo run a script do:\r\n\r\n    chibi-scheme -Rshen.runner script.shen\r\n\r\nThe initial heap size can be increased by using chibi-scheme's `-h` option:\r\n\r\n    chibi-scheme -h50M -Rshen.runner\r\n\r\nThe `(shen init)` module exports two functions, `shen.shen` for launching the shen REPL and `shen.load` for loading Shen scripts:\r\n\r\n```\r\n# cat test.shen\r\n(print [1 2 3 4])\r\n(nl)\r\n# chibi-scheme\r\n> (import (shen init))\r\n> (shen.load \"test.shen\")\r\n[1 2 3 4]\r\n((1 2 3 4) 0)\r\n> (shen.shen)\r\n\r\nShen, copyright (C) 2010-2015 Mark Tarver\r\nwww.shenlanguage.org, Shen 17\r\nrunning under Scheme, implementation: chibi-scheme\r\nport 0.10 ported by Bruno Deferrari\r\n\r\n\r\n(0-) \r\n```\r\n\r\nNative Calls\r\n------------\r\n\r\nScheme functions live under the `scm` namespace (`scm.` prefix). For example: `(scm.write [1 2 3 4])` invokes Scheme's `write` function with a list as an argument.\r\n\r\nTo send literal, unprocessed code to the underlying interpreter the `scm.` form can be used:\r\n\r\n```\r\n(0-) (scm. \"(scm.+ 1 2 3 4)\")\r\n10\r\n\r\n(1-) (scm. \"(scm.define (func-name x) (scm.display x) (scm.newline))\")\r\n#<undef>\r\n\r\n(2-) (func-name \"test\")\r\ntest\r\n#<undef>\r\n\r\n```\r\n\r\nNote that the `scm.` prefix is still required, because Scheme functions have been imported inside the Shen environment with an `scm.` prefix, and all compiled code runs inside this environment.\r\n\r\nBecause Scheme functions can have variable numbers of arguments and the code passed to `scm.` is not preprocessed, any imported function that is intended to support partial application has to be wrapped with a `defun`:\r\n\r\n```\r\n(3-) (defun for-each (F L) (scm.for-each F L))\r\nfor-each\r\n\r\n(4-) (for-each (/. X (do (print (+ X X)) (nl))) [1 2 3 4 5])\r\n2\r\n4\r\n6\r\n8\r\n10\r\n#<undef>\r\n\r\n(5-) (for-each (function print))\r\n#<procedure #f>\r\n```\r\n\r\nImporting bindings from Scheme modules\r\n--------------------------------------\r\n\r\nThe `scm.import-from-module` function imports bindings from Scheme modules into Shen's environment.\r\n\r\nIt takes two arguments: a module identifier, and a list of lists of which the first element is a symbol with the name the imported binding is going to have inside Shen's environment, and the second the name the binding inside the module.\r\n\r\nExample:\r\n\r\n```\r\n(6-) (scm.import-from-module [srfi 27] [[scm.random-integer random-integer] [scm.random-real random-real]])\r\n[[scm.random-integer random-integer] [scm.random-real random-real]]\r\n\r\n(7-) (scm.random-integer 1000)\r\n927\r\n\r\n(8-) (scm.random-real)\r\n0.155211571676289\r\n```\r\n\r\n\r\nLicense\r\n-------\r\n\r\n- Shen, Copyright © 2010-2015 Mark Tarver - [License](http://www.shenlanguage.org/license.pdf).\r\n- chibi-shen, Copyright © 2012-2015 Bruno Deferrari under [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}