{"name":"Shen/Scheme","tagline":"Shen/Scheme implementation.","body":"Shen/Scheme, a Scheme port of the Shen language\r\n====================================================\r\n\r\n* [Shen](http://shenlanguage.org)\r\n* [chibi-scheme](http://synthcode.com/wiki/chibi-scheme)\r\n* [gauche](http://practical-scheme.net/gauche/)\r\n* [shen-scheme](https://github.com/tizoc/shen-scheme)\r\n\r\nShen is a portable functional programming language by [Mark Tarver](http://marktarver.com) that offers\r\n\r\n- pattern matching,\r\n- λ calculus consistency,\r\n- macros,\r\n- optional lazy evaluation,\r\n- static type checking,\r\n- an integrated fully functional Prolog,\r\n- and an inbuilt compiler-compiler.\r\n\r\nshen-scheme is a port of the Shen language that runs on top of Sheme implementations. Right now the following implementations are supported:\r\n\r\n* [chibi-scheme](http://synthcode.com/wiki/chibi-scheme)\r\n* [gauche](http://practical-scheme.net/gauche/)\r\n\r\nBuilding\r\n--------\r\n\r\nTo precompile the `.kl` files into Scheme code run:\r\n\r\n    make\r\n\r\nThe resulting code will live under the `shen/compiled/` directory.\r\n  \r\nRunning\r\n-------\r\n\r\n### chibi-scheme\r\n\r\nVersion 0.7.3 or newer of chibi-scheme is needed to run shen-scheme. Other versions may work, but testing and development are done against that version.\r\n\r\nTo launch the Shen REPL do:\r\n\r\n    chibi-scheme -Rshen.runner\r\n\r\nTo run a script do:\r\n\r\n    chibi-scheme -Rshen.runner script.shen\r\n\r\nor\r\n\r\n    chibi-scheme -Rshen.runner script.shen arg1 arg2 arg3 ...\r\n\r\nto pass arguments to it.\r\n\r\nThe initial heap size can be increased by using chibi-scheme's `-h` option:\r\n\r\n    chibi-scheme -h50M -Rshen.runner\r\n\r\nFor convenience a `bin/shen-chibi` script is included for POSIX systems:\r\n\r\n    ./bin/shen-chibi script.shen arg1 arg2 arg3 ...\r\n\r\n### Gauche\r\n\r\nVersion 0.95 or newer of Gauche is required to run shen-scheme.\r\n\r\nTo launch the Shen REPL do:\r\n\r\n    gosh -I. -mshen.runner shen/runner.sld\r\n\r\nTo run a script do:\r\n\r\n    gosh -I. -mshen.runner shen/runner.sld script.shen\r\n\r\nor\r\n\r\n    gosh -I. -mshen.runner shen/runner.sld script.shen arg1 arg2 arg3 ...\r\n\r\nto pass arguments to it.\r\n\r\nFor convenience a `bin/shen-gauche` script is included for POSIX systems:\r\n\r\n    ./bin/shen-gauche script.shen arg1 arg2 arg3 ...\r\n\r\n### (shen init) module\r\n\r\nThe `(shen init)` module exports the following functions:\r\n\r\n* `kl:shen.shen` for launching the shen REPL.\r\n* `kl:shen.quiet-load` for loading Shen scripts.\r\n* `kl:eval-kl` for evaluating Klambda code.\r\n* `kl:eval` for evaluating Shen code.\r\n\r\n```\r\n# cat test.shen\r\n(print [1 2 3 4])\r\n(nl)\r\n# chibi-scheme\r\n> (import (shen init))\r\n> (kl:shen.quiet-load \"test.shen\")\r\n[1 2 3 4]\r\n((1 2 3 4) 0)\r\n> (kl:shen.shen)\r\n\r\nShen, copyright (C) 2010-2015 Mark Tarver\r\nwww.shenlanguage.org, Shen 19.2\r\nrunning under Scheme, implementation: chibi-scheme\r\nport 0.14 ported by Bruno Deferrari\r\n\r\n\r\n(0-) \r\n```\r\n\r\nNative Calls\r\n------------\r\n\r\nScheme functions live under the `scm` namespace (`scm.` prefix). For example: `(scm.write [1 2 3 4])` invokes Scheme's `write` function with a list as an argument.\r\n\r\nTo send literal, unprocessed code to the underlying interpreter the `scm.` form can be used:\r\n\r\n```\r\n(0-) (scm. \"(+ 1 2 3 4)\")\r\n10\r\n\r\n(1-) (scm. \"(define (func-name x) (display x) (newline))\")\r\n#<undef>\r\n\r\n(2-) (scm.func-name \"test\")\r\ntest\r\n#<undef>\r\n\r\n```\r\n\r\nBecause Scheme functions can have variable numbers of arguments and the code passed to `scm.` is not preprocessed, any imported function that is intended to support partial application has to be wrapped with a `defun`:\r\n\r\n```\r\n(3-) (defun for-each (F L) (scm.for-each F L))\r\nfor-each\r\n\r\n(4-) (for-each (/. X (do (print (+ X X)) (nl))) [1 2 3 4 5])\r\n2\r\n4\r\n6\r\n8\r\n10\r\n#<undef>\r\n\r\n(5-) (for-each (function print))\r\n#<procedure #f>\r\n```\r\n\r\nImporting bindings from Scheme modules\r\n--------------------------------------\r\n\r\nThe `scm.import-from-module` function imports bindings from Scheme modules into Shen's environment.\r\n\r\nIt takes two arguments: a module identifier, and a list of lists of which the first element is a symbol with the name the imported binding is going to have inside Shen's environment, and the second the name the binding inside the module. If the exported name is the same as the original name, a symbol can be used in place of the list.\r\n\r\nExample (chibi):\r\n\r\n```\r\n(6-) (scm.import-from-module [srfi 27] [[random-integer random-integer] [random-real random-real]])\r\n[[random-integer random-integer] [random-real random-real]]\r\n\r\n(7-) (scm.random-integer 1000)\r\n927\r\n\r\n(8-) (scm.random-real)\r\n0.155211571676289\r\n```\r\n\r\nExample (gauche):\r\n\r\n```\r\n(0-) (scm.import-from-module file.util [home-directory])\r\n[home-directory]\r\n\r\n(1-) (scm.home-directory)\r\n\"/Users/bruno\"\r\n```\r\n\r\nExtensions to core Shen\r\n-----------------------\r\n\r\n##### Command line arguments\r\n\r\n* `(command-line)` with type `--> (list string)`: Returns a list containing all comand line elements. The first element is the program name, and the remaining elements are the arguments passed to it.\r\n\r\n##### Process exit\r\n\r\n* `(exit ExitCode)` with type `number --> unit`: Exits the process using the specified exit code.\r\n\r\n##### Standard error stream\r\n\r\n* `(sterror)` with type `--> (stream out)`: Returns the standard error stream.\r\n\r\n##### File operations\r\n\r\n* `(open-append Filepath)` with type `string --> (stream out)`: Opens a file for output in \"append\" mode that doesn't truncate the file and returns a stream positioned at the end of the file.\r\n\r\n##### Stream position operations\r\n\r\n* `(stream-position Stream)` with type `(stream A) --> number`: Returns the stream position.\r\n* `(stream-set-position Stream AbsolutePosition)` with type `(stream A) --> number --> number`: Sets the stream position.\r\n* `(stream-set-position-from-current Stream RelativePosition)` with type `(stream A) --> number --> number`: Sets the stream position to a value relative to the current position.\r\n* `(stream-set-position-from-end Stream RelativePosition)` with type `(stream A) --> number --> number`: Sets the stream position to a value relative to the end position.\r\n\r\n**Note:** Gauche's stream-position behaves correctly now, but in the current version of chibi-scheme, when the file is opened in append mode, `stream-position` doesn't behave correctly.\r\n\r\nLicense\r\n-------\r\n\r\n- Shen, Copyright © 2010-2015 Mark Tarver - [License](http://www.shenlanguage.org/license.pdf).\r\n- shen-scheme, Copyright © 2012-2015 Bruno Deferrari under [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}