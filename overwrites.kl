"Copyright (c) 2012-2015 Bruno Deferrari.  All rights reserved.
BSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"

(defun cd (V1250) (let Dir (if (= V1250 "") "" (scm.string-append V1250 "/")) (let NewDir (scm.change-directory Dir) (set *home-directory* (scm.current-directory)))))

(defun hash (V1253 V1254) (let Res (scm.hash V1253 V1254) (scm.if (scm.eq? 0 Res) 1 Res)))

(defun not (V1256) (scm.not V1256))

(defun boolean? (V1258) (scm.boolean? V1258))

(defun integer? (V1260) (scm.integer? V1260))

(defun variable? (V1262) (scm.and (scm.symbol? V1262) (scm.char-upper-case? (scm.string-ref (scm.symbol->string V1262) 0))))

(defun symbol? (V1264) (scm.symbol? V1264))

(defun shen.pvar? (V1266) (scm.and (absvector? V1266) (scm.and (scm.> (scm.vector-length V1266) 0) (scm.eq? (scm.vector-ref V1266 0) shen.pvar))))

(defun shen.numbyte? (V1268) (scm.and (scm.>= V1268 48) (scm.<= V1268 57)))

(defun shen.byte->digit (V1270) (scm.- V1270 48))

(defun shen.lookup-func (V1273 V1274) (let Entry (scm.assq V1273 V1274) (scm.if Entry (scm.cdr Entry) (simple-error (scm.string-append (scm.symbol->string V1273) " has no lambda expansion\n")))))

(defun shen.sysfunc? (V1276) (scm.shen-sysfunc? V1276))

(defun read-file-as-bytelist (V1278) (scm.read-file-as-bytelist V1278))

(defun read-file-as-string (V1280) (scm.read-file-as-string V1280))



