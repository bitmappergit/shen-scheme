"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-file-as-bytelist (V2161) (let Stream (open V2161 in) (let Byte (read-byte Stream) (let Bytes (shen.read-file-as-bytelist-help Stream Byte ()) (let Close (close Stream) (reverse Bytes))))))

(defun shen.read-file-as-bytelist-help (V2165 V2166 V2167) (cond ((= -1 V2166) V2167) (true (shen.read-file-as-bytelist-help V2165 (read-byte V2165) (cons V2166 V2167)))))

(defun read-file-as-string (V2169) (let Stream (open V2169 in) (shen.rfas-h Stream (read-byte Stream) "")))

(defun shen.rfas-h (V2173 V2174 V2175) (cond ((= -1 V2174) (do (close V2173) V2175)) (true (shen.rfas-h V2173 (read-byte V2173) (cn V2175 (n->string V2174))))))

(defun input (V2177) (eval-kl (read V2177)))

(defun input+ (V2180 V2181) (let Mono? (shen.monotype V2180) (let Input (read V2181) (if (= false (shen.typecheck Input (shen.demodulate V2180))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2180 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2183) (cond ((cons? V2183) (map (lambda Z (shen.monotype Z)) V2183)) (true (if (variable? V2183) (simple-error (cn "input+ expects a monotype: not " (shen.app V2183 "
" shen.a))) V2183))))

(defun read (V2185) (hd (shen.read-loop V2185 (read-byte V2185) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2193 V2194 V2195) (cond ((= 94 V2194) (simple-error "read aborted")) ((= -1 V2194) (if (empty? V2195) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2195 (lambda E E)))) ((shen.terminator? V2194) (let AllBytes (append V2195 (cons V2194 ())) (let It (shen.record-it AllBytes) (let Read (compile (lambda X (shen.<st_input> X)) AllBytes (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2193 (read-byte V2193) AllBytes) Read))))) (true (shen.read-loop V2193 (read-byte V2193) (append V2195 (cons V2194 ()))))))

(defun shen.terminator? (V2197) (element? V2197 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2199) (shen.lineread-loop (read-byte V2199) () V2199))

(defun shen.lineread-loop (V2204 V2205 V2206) (cond ((= -1 V2204) (if (empty? V2205) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2205 (lambda E E)))) ((= V2204 (shen.hat)) (simple-error "line read aborted")) ((element? V2204 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2205 (lambda E shen.nextline)) (let It (shen.record-it V2205) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-byte V2206) (append V2205 (cons V2204 ())) V2206) Line)))) (true (shen.lineread-loop (read-byte V2206) (append V2205 (cons V2204 ())) V2206))))

(defun shen.record-it (V2208) (let TrimLeft (shen.trim-whitespace V2208) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2210) (cond ((and (cons? V2210) (element? (hd V2210) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2210))) (true V2210)))

(defun shen.record-it-h (V2212) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2212))) V2212))

(defun shen.cn-all (V2214) (cond ((= () V2214) "") ((cons? V2214) (cn (hd V2214) (shen.cn-all (tl V2214)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2216) (let Bytelist (read-file-as-bytelist V2216) (compile (lambda X (shen.<st_input> X)) Bytelist (lambda X (shen.read-error X)))))

(defun read-from-string (V2218) (let Ns (map (lambda X (string->n X)) (explode V2218)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2226) (cond ((and (cons? V2226) (and (cons? (hd V2226)) (and (cons? (tl V2226)) (= () (tl (tl V2226)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2226)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2233 V2234) (cond ((= () V2234) "") ((= 0 V2233) "") ((cons? V2234) (cn (n->string (hd V2234)) (shen.compress-50 (- V2233 1) (tl V2234)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2236) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2236) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2236) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2236) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2236) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2236) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2236) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2236) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2236) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2236) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2236) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2236) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2236) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2236) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2236) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2238) (if (and (cons? (hd V2238)) (= 91 (hd (hd V2238)))) (shen.pair (hd (shen.pair (tl (hd V2238)) (shen.hdtl V2238))) shen.skip) (fail)))

(defun shen.<rsb> (V2240) (if (and (cons? (hd V2240)) (= 93 (hd (hd V2240)))) (shen.pair (hd (shen.pair (tl (hd V2240)) (shen.hdtl V2240))) shen.skip) (fail)))

(defun shen.<lcurly> (V2242) (if (and (cons? (hd V2242)) (= 123 (hd (hd V2242)))) (shen.pair (hd (shen.pair (tl (hd V2242)) (shen.hdtl V2242))) shen.skip) (fail)))

(defun shen.<rcurly> (V2244) (if (and (cons? (hd V2244)) (= 125 (hd (hd V2244)))) (shen.pair (hd (shen.pair (tl (hd V2244)) (shen.hdtl V2244))) shen.skip) (fail)))

(defun shen.<bar> (V2246) (if (and (cons? (hd V2246)) (= 124 (hd (hd V2246)))) (shen.pair (hd (shen.pair (tl (hd V2246)) (shen.hdtl V2246))) shen.skip) (fail)))

(defun shen.<semicolon> (V2248) (if (and (cons? (hd V2248)) (= 59 (hd (hd V2248)))) (shen.pair (hd (shen.pair (tl (hd V2248)) (shen.hdtl V2248))) shen.skip) (fail)))

(defun shen.<colon> (V2250) (if (and (cons? (hd V2250)) (= 58 (hd (hd V2250)))) (shen.pair (hd (shen.pair (tl (hd V2250)) (shen.hdtl V2250))) shen.skip) (fail)))

(defun shen.<comma> (V2252) (if (and (cons? (hd V2252)) (= 44 (hd (hd V2252)))) (shen.pair (hd (shen.pair (tl (hd V2252)) (shen.hdtl V2252))) shen.skip) (fail)))

(defun shen.<equal> (V2254) (if (and (cons? (hd V2254)) (= 61 (hd (hd V2254)))) (shen.pair (hd (shen.pair (tl (hd V2254)) (shen.hdtl V2254))) shen.skip) (fail)))

(defun shen.<minus> (V2256) (if (and (cons? (hd V2256)) (= 45 (hd (hd V2256)))) (shen.pair (hd (shen.pair (tl (hd V2256)) (shen.hdtl V2256))) shen.skip) (fail)))

(defun shen.<lrb> (V2258) (if (and (cons? (hd V2258)) (= 40 (hd (hd V2258)))) (shen.pair (hd (shen.pair (tl (hd V2258)) (shen.hdtl V2258))) shen.skip) (fail)))

(defun shen.<rrb> (V2260) (if (and (cons? (hd V2260)) (= 41 (hd (hd V2260)))) (shen.pair (hd (shen.pair (tl (hd V2260)) (shen.hdtl V2260))) shen.skip) (fail)))

(defun shen.<atom> (V2262) (let YaccParse (let Parse_shen.<str> (shen.<str> V2262) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2262) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2262) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2264) (cond ((= () V2264) "") ((and (cons? V2264) (and (= "c" (hd V2264)) (and (cons? (tl V2264)) (= "#" (hd (tl V2264)))))) (let CodePoint (shen.code-point (tl (tl V2264))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2264))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2264) (@s (hd V2264) (shen.control-chars (tl V2264)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2268) (cond ((and (cons? V2268) (= ";" (hd V2268))) "") ((and (cons? V2268) (element? (hd V2268) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2268) (shen.code-point (tl V2268)))) (true (simple-error (cn "code point parse error " (shen.app V2268 "
" shen.a))))))

(defun shen.after-codepoint (V2274) (cond ((= () V2274) ()) ((and (cons? V2274) (= ";" (hd V2274))) (tl V2274)) ((cons? V2274) (shen.after-codepoint (tl V2274))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2276) (shen.pre (reverse (shen.digits->integers V2276)) 0))

(defun shen.digits->integers (V2282) (cond ((and (cons? V2282) (= "0" (hd V2282))) (cons 0 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "1" (hd V2282))) (cons 1 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "2" (hd V2282))) (cons 2 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "3" (hd V2282))) (cons 3 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "4" (hd V2282))) (cons 4 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "5" (hd V2282))) (cons 5 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "6" (hd V2282))) (cons 6 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "7" (hd V2282))) (cons 7 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "8" (hd V2282))) (cons 8 (shen.digits->integers (tl V2282)))) ((and (cons? V2282) (= "9" (hd V2282))) (cons 9 (shen.digits->integers (tl V2282)))) (true ())))

(defun shen.<sym> (V2284) (let Parse_shen.<alpha> (shen.<alpha> V2284) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2286) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2286) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2286) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2288) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2288) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2288) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2290) (if (cons? (hd V2290)) (let Parse_Byte (hd (hd V2290)) (if (shen.numbyte? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V2290)) (shen.hdtl V2290))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.numbyte? (V2296) (cond ((= 48 V2296) true) ((= 49 V2296) true) ((= 50 V2296) true) ((= 51 V2296) true) ((= 52 V2296) true) ((= 53 V2296) true) ((= 54 V2296) true) ((= 55 V2296) true) ((= 56 V2296) true) ((= 57 V2296) true) (true false)))

(defun shen.<alpha> (V2298) (if (cons? (hd V2298)) (let Parse_Byte (hd (hd V2298)) (if (shen.symbol-code? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V2298)) (shen.hdtl V2298))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.symbol-code? (V2300) (or (= V2300 126) (or (and (> V2300 94) (< V2300 123)) (or (and (> V2300 59) (< V2300 91)) (or (and (> V2300 41) (and (< V2300 58) (not (= V2300 44)))) (or (and (> V2300 34) (< V2300 40)) (= V2300 33)))))))

(defun shen.<str> (V2302) (let Parse_shen.<dbq> (shen.<dbq> V2302) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2304) (if (cons? (hd V2304)) (let Parse_Byte (hd (hd V2304)) (if (= Parse_Byte 34) (shen.pair (hd (shen.pair (tl (hd V2304)) (shen.hdtl V2304))) Parse_Byte) (fail))) (fail)))

(defun shen.<strcontents> (V2306) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2306) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2306) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2308) (if (cons? (hd V2308)) (let Parse_Byte (hd (hd V2308)) (shen.pair (hd (shen.pair (tl (hd V2308)) (shen.hdtl V2308))) (n->string Parse_Byte))) (fail)))

(defun shen.<strc> (V2310) (if (cons? (hd V2310)) (let Parse_Byte (hd (hd V2310)) (if (not (= Parse_Byte 34)) (shen.pair (hd (shen.pair (tl (hd V2310)) (shen.hdtl V2310))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.<number> (V2312) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2312) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2312) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2312) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2312) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2312) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2312) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2314) (if (and (cons? (hd V2314)) (= 101 (hd (hd V2314)))) (shen.pair (hd (shen.pair (tl (hd V2314)) (shen.hdtl V2314))) shen.skip) (fail)))

(defun shen.<log10> (V2316) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2316) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2316) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2318) (if (cons? (hd V2318)) (let Parse_Byte (hd (hd V2318)) (if (= Parse_Byte 43) (shen.pair (hd (shen.pair (tl (hd V2318)) (shen.hdtl V2318))) Parse_Byte) (fail))) (fail)))

(defun shen.<stop> (V2320) (if (cons? (hd V2320)) (let Parse_Byte (hd (hd V2320)) (if (= Parse_Byte 46) (shen.pair (hd (shen.pair (tl (hd V2320)) (shen.hdtl V2320))) Parse_Byte) (fail))) (fail)))

(defun shen.<predigits> (V2322) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2322) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2322) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2324) (let Parse_shen.<digits> (shen.<digits> V2324) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2326) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2326) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2326) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2328) (if (cons? (hd V2328)) (let Parse_X (hd (hd V2328)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2328)) (shen.hdtl V2328))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2330) (cond ((= 48 V2330) 0) ((= 49 V2330) 1) ((= 50 V2330) 2) ((= 51 V2330) 3) ((= 52 V2330) 4) ((= 53 V2330) 5) ((= 54 V2330) 6) ((= 55 V2330) 7) ((= 56 V2330) 8) ((= 57 V2330) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2335 V2336) (cond ((= () V2335) 0) ((cons? V2335) (+ (* (shen.expt 10 V2336) (hd V2335)) (shen.pre (tl V2335) (+ V2336 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2341 V2342) (cond ((= () V2341) 0) ((cons? V2341) (+ (* (shen.expt 10 (- 0 V2342)) (hd V2341)) (shen.post (tl V2341) (+ V2342 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2347 V2348) (cond ((= 0 V2348) 1) ((> V2348 0) (* V2347 (shen.expt V2347 (- V2348 1)))) (true (* 1.0 (/ (shen.expt V2347 (+ V2348 1)) V2347)))))

(defun shen.<st_input1> (V2350) (let Parse_shen.<st_input> (shen.<st_input> V2350) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2352) (let Parse_shen.<st_input> (shen.<st_input> V2352) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2354) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2354) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2354) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2356) (let Parse_shen.<backslash> (shen.<backslash> V2356) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2358) (if (and (cons? (hd V2358)) (= 92 (hd (hd V2358)))) (shen.pair (hd (shen.pair (tl (hd V2358)) (shen.hdtl V2358))) shen.skip) (fail)))

(defun shen.<anysingle> (V2360) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2360) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2360) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2362) (if (cons? (hd V2362)) (let Parse_X (hd (hd V2362)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V2362)) (shen.hdtl V2362))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2364) (if (cons? (hd V2364)) (let Parse_X (hd (hd V2364)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V2364)) (shen.hdtl V2364))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2366) (let Parse_shen.<backslash> (shen.<backslash> V2366) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2368) (if (and (cons? (hd V2368)) (= 42 (hd (hd V2368)))) (shen.pair (hd (shen.pair (tl (hd V2368)) (shen.hdtl V2368))) shen.skip) (fail)))

(defun shen.<anymulti> (V2370) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2370) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2370) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2370)) (let Parse_X (hd (hd V2370)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V2370)) (shen.hdtl V2370))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2372) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2372) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2372) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2374) (if (cons? (hd V2374)) (let Parse_X (hd (hd V2374)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V2374)) (shen.hdtl V2374))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2376) (cond ((= () V2376) ()) ((and (cons? V2376) (and (cons? (tl V2376)) (and (cons? (tl (tl V2376))) (and (= () (tl (tl (tl V2376)))) (= (hd (tl V2376)) bar!))))) (cons cons (cons (hd V2376) (tl (tl V2376))))) ((cons? V2376) (cons cons (cons (hd V2376) (cons (shen.cons_form (tl V2376)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2381 V2382) (cond ((and (cons? V2381) (and (= $ (hd V2381)) (and (cons? (tl V2381)) (= () (tl (tl V2381)))))) (append (explode (hd (tl V2381))) V2382)) ((and (cons? V2381) (and (= package (hd V2381)) (and (cons? (tl V2381)) (and (= null (hd (tl V2381))) (cons? (tl (tl V2381))))))) (append (tl (tl (tl V2381))) V2382)) ((and (cons? V2381) (and (= package (hd V2381)) (and (cons? (tl V2381)) (cons? (tl (tl V2381)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2381)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2381))) (let PackageNameDot (intern (cn (str (hd (tl V2381))) ".")) (let ExpPackageName (explode (hd (tl V2381))) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2381))) ExpPackageName) (let Internal (shen.record-internal (hd (tl V2381)) (shen.internal-symbols ExpPackageName Packaged)) (append Packaged V2382)))))))) (true (cons V2381 V2382))))

(defun shen.record-exceptions (V2385 V2386) (let CurrExceptions (trap-error (get V2386 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V2385 CurrExceptions) (put V2386 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2389 V2390) (put V2389 shen.internal-symbols (union V2390 (trap-error (get V2389 shen.internal-symbols (value *property-vector*)) (lambda E ()))) (value *property-vector*)))

(defun shen.internal-symbols (V2401 V2402) (cond ((and (symbol? V2402) (shen.prefix? V2401 (explode V2402))) (cons V2402 ())) ((cons? V2402) (union (shen.internal-symbols V2401 (hd V2402)) (shen.internal-symbols V2401 (tl V2402)))) (true ())))

(defun shen.packageh (V2419 V2420 V2421 V2422) (cond ((cons? V2421) (cons (shen.packageh V2419 V2420 (hd V2421) V2422) (shen.packageh V2419 V2420 (tl V2421) V2422))) ((or (shen.sysfunc? V2421) (or (variable? V2421) (or (element? V2421 V2420) (or (shen.doubleunderline? V2421) (shen.singleunderline? V2421))))) V2421) ((and (symbol? V2421) (let ExplodeX (explode V2421) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2422 ExplodeX))))) (concat V2419 V2421)) (true V2421)))



