"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-file-as-bytelist (V1182) (let Stream (open V1182 in) (let Byte (read-byte Stream) (let Bytes (shen.read-file-as-bytelist-help Stream Byte ()) (let Close (close Stream) (reverse Bytes))))))

(defun shen.read-file-as-bytelist-help (V1183 V1184 V1185) (cond ((= -1 V1184) V1185) (true (shen.read-file-as-bytelist-help V1183 (read-byte V1183) (cons V1184 V1185)))))

(defun read-file-as-string (V1186) (let Stream (open V1186 in) (shen.rfas-h Stream (read-byte Stream) "")))

(defun shen.rfas-h (V1187 V1188 V1189) (cond ((= -1 V1188) (do (close V1187) V1189)) (true (shen.rfas-h V1187 (read-byte V1187) (cn V1189 (n->string V1188))))))

(defun input (V1190) (eval-kl (read V1190)))

(defun input+ (V1191 V1192) (let Mono? (shen.monotype V1191) (let Input (read V1192) (if (= false (shen.typecheck Input (shen.demodulate V1191))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V1191 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V1193) (cond ((cons? V1193) (map shen.monotype V1193)) (true (if (variable? V1193) (simple-error (cn "input+ expects a monotype: not " (shen.app V1193 "
" shen.a))) V1193))))

(defun read (V1194) (hd (shen.read-loop V1194 (read-byte V1194) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V1199 V1200 V1201) (cond ((= 94 V1200) (simple-error "read aborted")) ((= -1 V1200) (if (empty? V1201) (simple-error "error: empty stream") (compile shen.<st_input> V1201 (lambda E E)))) ((shen.terminator? V1200) (let AllBytes (append V1201 (cons V1200 ())) (let It (shen.record-it AllBytes) (let Read (compile shen.<st_input> AllBytes (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V1199 (read-byte V1199) AllBytes) Read))))) (true (shen.read-loop V1199 (read-byte V1199) (append V1201 (cons V1200 ()))))))

(defun shen.terminator? (V1202) (element? V1202 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V1203) (shen.lineread-loop (read-byte V1203) () V1203))

(defun shen.lineread-loop (V1205 V1206 V1207) (cond ((= -1 V1205) (if (empty? V1206) (simple-error "empty stream") (compile shen.<st_input> V1206 (lambda E E)))) ((= V1205 (shen.hat)) (simple-error "line read aborted")) ((element? V1205 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile shen.<st_input> V1206 (lambda E shen.nextline)) (let It (shen.record-it V1206) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-byte V1207) (append V1206 (cons V1205 ())) V1207) Line)))) (true (shen.lineread-loop (read-byte V1207) (append V1206 (cons V1205 ())) V1207))))

(defun shen.record-it (V1208) (let TrimLeft (shen.trim-whitespace V1208) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V1209) (cond ((and (cons? V1209) (element? (hd V1209) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V1209))) (true V1209)))

(defun shen.record-it-h (V1210) (do (set shen.*it* (shen.cn-all (map (lambda V1180 (n->string V1180)) V1210))) V1210))

(defun shen.cn-all (V1211) (cond ((= () V1211) "") ((cons? V1211) (cn (hd V1211) (shen.cn-all (tl V1211)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V1212) (let Bytelist (read-file-as-bytelist V1212) (compile shen.<st_input> Bytelist shen.read-error)))

(defun read-from-string (V1213) (let Ns (map (lambda V1181 (string->n V1181)) (explode V1213)) (compile shen.<st_input> Ns shen.read-error)))

(defun shen.read-error (V1220) (cond ((and (cons? V1220) (and (cons? (hd V1220)) (and (cons? (tl V1220)) (= () (tl (tl V1220)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V1220)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V1225 V1226) (cond ((= () V1226) "") ((= 0 V1225) "") ((cons? V1226) (cn (n->string (hd V1226)) (shen.compress-50 (- V1225 1) (tl V1226)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V1227) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V1227) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V1227) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V1227) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V1227) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V1227) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V1227) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1227) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1227) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1227) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V1227) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1227) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V1227) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V1227) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1227) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V1228) (if (and (cons? (hd V1228)) (= 91 (hd (hd V1228)))) (shen.pair (hd (shen.pair (tl (hd V1228)) (shen.hdtl V1228))) shen.skip) (fail)))

(defun shen.<rsb> (V1229) (if (and (cons? (hd V1229)) (= 93 (hd (hd V1229)))) (shen.pair (hd (shen.pair (tl (hd V1229)) (shen.hdtl V1229))) shen.skip) (fail)))

(defun shen.<lcurly> (V1230) (if (and (cons? (hd V1230)) (= 123 (hd (hd V1230)))) (shen.pair (hd (shen.pair (tl (hd V1230)) (shen.hdtl V1230))) shen.skip) (fail)))

(defun shen.<rcurly> (V1231) (if (and (cons? (hd V1231)) (= 125 (hd (hd V1231)))) (shen.pair (hd (shen.pair (tl (hd V1231)) (shen.hdtl V1231))) shen.skip) (fail)))

(defun shen.<bar> (V1232) (if (and (cons? (hd V1232)) (= 124 (hd (hd V1232)))) (shen.pair (hd (shen.pair (tl (hd V1232)) (shen.hdtl V1232))) shen.skip) (fail)))

(defun shen.<semicolon> (V1233) (if (and (cons? (hd V1233)) (= 59 (hd (hd V1233)))) (shen.pair (hd (shen.pair (tl (hd V1233)) (shen.hdtl V1233))) shen.skip) (fail)))

(defun shen.<colon> (V1234) (if (and (cons? (hd V1234)) (= 58 (hd (hd V1234)))) (shen.pair (hd (shen.pair (tl (hd V1234)) (shen.hdtl V1234))) shen.skip) (fail)))

(defun shen.<comma> (V1235) (if (and (cons? (hd V1235)) (= 44 (hd (hd V1235)))) (shen.pair (hd (shen.pair (tl (hd V1235)) (shen.hdtl V1235))) shen.skip) (fail)))

(defun shen.<equal> (V1236) (if (and (cons? (hd V1236)) (= 61 (hd (hd V1236)))) (shen.pair (hd (shen.pair (tl (hd V1236)) (shen.hdtl V1236))) shen.skip) (fail)))

(defun shen.<minus> (V1237) (if (and (cons? (hd V1237)) (= 45 (hd (hd V1237)))) (shen.pair (hd (shen.pair (tl (hd V1237)) (shen.hdtl V1237))) shen.skip) (fail)))

(defun shen.<lrb> (V1238) (if (and (cons? (hd V1238)) (= 40 (hd (hd V1238)))) (shen.pair (hd (shen.pair (tl (hd V1238)) (shen.hdtl V1238))) shen.skip) (fail)))

(defun shen.<rrb> (V1239) (if (and (cons? (hd V1239)) (= 41 (hd (hd V1239)))) (shen.pair (hd (shen.pair (tl (hd V1239)) (shen.hdtl V1239))) shen.skip) (fail)))

(defun shen.<atom> (V1240) (let YaccParse (let Parse_shen.<str> (shen.<str> V1240) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V1240) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V1240) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V1241) (cond ((= () V1241) "") ((and (cons? V1241) (and (= "c" (hd V1241)) (and (cons? (tl V1241)) (= "#" (hd (tl V1241)))))) (let CodePoint (shen.code-point (tl (tl V1241))) (let AfterCodePoint (shen.after-codepoint (tl (tl V1241))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V1241) (@s (hd V1241) (shen.control-chars (tl V1241)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V1244) (cond ((and (cons? V1244) (= ";" (hd V1244))) "") ((and (cons? V1244) (element? (hd V1244) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V1244) (shen.code-point (tl V1244)))) (true (simple-error (cn "code point parse error " (shen.app V1244 "
" shen.a))))))

(defun shen.after-codepoint (V1249) (cond ((= () V1249) ()) ((and (cons? V1249) (= ";" (hd V1249))) (tl V1249)) ((cons? V1249) (shen.after-codepoint (tl V1249))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V1250) (shen.pre (reverse (shen.digits->integers V1250)) 0))

(defun shen.digits->integers (V1255) (cond ((and (cons? V1255) (= "0" (hd V1255))) (cons 0 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "1" (hd V1255))) (cons 1 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "2" (hd V1255))) (cons 2 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "3" (hd V1255))) (cons 3 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "4" (hd V1255))) (cons 4 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "5" (hd V1255))) (cons 5 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "6" (hd V1255))) (cons 6 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "7" (hd V1255))) (cons 7 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "8" (hd V1255))) (cons 8 (shen.digits->integers (tl V1255)))) ((and (cons? V1255) (= "9" (hd V1255))) (cons 9 (shen.digits->integers (tl V1255)))) (true ())))

(defun shen.<sym> (V1256) (let Parse_shen.<alpha> (shen.<alpha> V1256) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V1257) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V1257) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1257) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V1258) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V1258) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V1258) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V1259) (if (cons? (hd V1259)) (let Parse_Byte (hd (hd V1259)) (if (shen.numbyte? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V1259)) (shen.hdtl V1259))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.numbyte? (V1264) (cond ((= 48 V1264) true) ((= 49 V1264) true) ((= 50 V1264) true) ((= 51 V1264) true) ((= 52 V1264) true) ((= 53 V1264) true) ((= 54 V1264) true) ((= 55 V1264) true) ((= 56 V1264) true) ((= 57 V1264) true) (true false)))

(defun shen.<alpha> (V1265) (if (cons? (hd V1265)) (let Parse_Byte (hd (hd V1265)) (if (shen.symbol-code? Parse_Byte) (shen.pair (hd (shen.pair (tl (hd V1265)) (shen.hdtl V1265))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.symbol-code? (V1266) (or (= V1266 126) (or (and (> V1266 94) (< V1266 123)) (or (and (> V1266 59) (< V1266 91)) (or (and (> V1266 41) (and (< V1266 58) (not (= V1266 44)))) (or (and (> V1266 34) (< V1266 40)) (= V1266 33)))))))

(defun shen.<str> (V1267) (let Parse_shen.<dbq> (shen.<dbq> V1267) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V1268) (if (cons? (hd V1268)) (let Parse_Byte (hd (hd V1268)) (if (= Parse_Byte 34) (shen.pair (hd (shen.pair (tl (hd V1268)) (shen.hdtl V1268))) Parse_Byte) (fail))) (fail)))

(defun shen.<strcontents> (V1269) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V1269) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1269) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V1270) (if (cons? (hd V1270)) (let Parse_Byte (hd (hd V1270)) (shen.pair (hd (shen.pair (tl (hd V1270)) (shen.hdtl V1270))) (n->string Parse_Byte))) (fail)))

(defun shen.<strc> (V1271) (if (cons? (hd V1271)) (let Parse_Byte (hd (hd V1271)) (if (not (= Parse_Byte 34)) (shen.pair (hd (shen.pair (tl (hd V1271)) (shen.hdtl V1271))) (n->string Parse_Byte)) (fail))) (fail)))

(defun shen.<number> (V1272) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1272) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V1272) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1272) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1272) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1272) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1272) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V1273) (if (and (cons? (hd V1273)) (= 101 (hd (hd V1273)))) (shen.pair (hd (shen.pair (tl (hd V1273)) (shen.hdtl V1273))) shen.skip) (fail)))

(defun shen.<log10> (V1274) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1274) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1274) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V1275) (if (cons? (hd V1275)) (let Parse_Byte (hd (hd V1275)) (if (= Parse_Byte 43) (shen.pair (hd (shen.pair (tl (hd V1275)) (shen.hdtl V1275))) Parse_Byte) (fail))) (fail)))

(defun shen.<stop> (V1276) (if (cons? (hd V1276)) (let Parse_Byte (hd (hd V1276)) (if (= Parse_Byte 46) (shen.pair (hd (shen.pair (tl (hd V1276)) (shen.hdtl V1276))) Parse_Byte) (fail))) (fail)))

(defun shen.<predigits> (V1277) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1277) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1277) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V1278) (let Parse_shen.<digits> (shen.<digits> V1278) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V1279) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V1279) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V1279) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V1280) (if (cons? (hd V1280)) (let Parse_X (hd (hd V1280)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1280)) (shen.hdtl V1280))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V1281) (cond ((= 48 V1281) 0) ((= 49 V1281) 1) ((= 50 V1281) 2) ((= 51 V1281) 3) ((= 52 V1281) 4) ((= 53 V1281) 5) ((= 54 V1281) 6) ((= 55 V1281) 7) ((= 56 V1281) 8) ((= 57 V1281) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V1284 V1285) (cond ((= () V1284) 0) ((cons? V1284) (+ (* (shen.expt 10 V1285) (hd V1284)) (shen.pre (tl V1284) (+ V1285 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V1288 V1289) (cond ((= () V1288) 0) ((cons? V1288) (+ (* (shen.expt 10 (- 0 V1289)) (hd V1288)) (shen.post (tl V1288) (+ V1289 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V1292 V1293) (cond ((= 0 V1293) 1) ((> V1293 0) (* V1292 (shen.expt V1292 (- V1293 1)))) (true (* 1.0 (/ (shen.expt V1292 (+ V1293 1)) V1292)))))

(defun shen.<st_input1> (V1294) (let Parse_shen.<st_input> (shen.<st_input> V1294) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V1295) (let Parse_shen.<st_input> (shen.<st_input> V1295) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V1296) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V1296) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V1296) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V1297) (let Parse_shen.<backslash> (shen.<backslash> V1297) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V1298) (if (and (cons? (hd V1298)) (= 92 (hd (hd V1298)))) (shen.pair (hd (shen.pair (tl (hd V1298)) (shen.hdtl V1298))) shen.skip) (fail)))

(defun shen.<anysingle> (V1299) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V1299) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1299) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V1300) (if (cons? (hd V1300)) (let Parse_X (hd (hd V1300)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V1300)) (shen.hdtl V1300))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V1301) (if (cons? (hd V1301)) (let Parse_X (hd (hd V1301)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V1301)) (shen.hdtl V1301))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V1302) (let Parse_shen.<backslash> (shen.<backslash> V1302) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V1303) (if (and (cons? (hd V1303)) (= 42 (hd (hd V1303)))) (shen.pair (hd (shen.pair (tl (hd V1303)) (shen.hdtl V1303))) shen.skip) (fail)))

(defun shen.<anymulti> (V1304) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1304) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V1304) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V1304)) (let Parse_X (hd (hd V1304)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V1304)) (shen.hdtl V1304))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V1305) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V1305) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V1305) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V1306) (if (cons? (hd V1306)) (let Parse_X (hd (hd V1306)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V1306)) (shen.hdtl V1306))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V1307) (cond ((= () V1307) ()) ((and (cons? V1307) (and (cons? (tl V1307)) (and (cons? (tl (tl V1307))) (and (= () (tl (tl (tl V1307)))) (= (hd (tl V1307)) bar!))))) (cons cons (cons (hd V1307) (tl (tl V1307))))) ((cons? V1307) (cons cons (cons (hd V1307) (cons (shen.cons_form (tl V1307)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V1310 V1311) (cond ((and (cons? V1310) (and (= $ (hd V1310)) (and (cons? (tl V1310)) (= () (tl (tl V1310)))))) (append (explode (hd (tl V1310))) V1311)) ((and (cons? V1310) (and (= package (hd V1310)) (and (cons? (tl V1310)) (and (= null (hd (tl V1310))) (cons? (tl (tl V1310))))))) (append (tl (tl (tl V1310))) V1311)) ((and (cons? V1310) (and (= package (hd V1310)) (and (cons? (tl V1310)) (cons? (tl (tl V1310)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V1310)))) (let Record (shen.record-exceptions ListofExceptions (hd (tl V1310))) (let PackageNameDot (intern (cn (str (hd (tl V1310))) ".")) (append (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V1310)))) V1311))))) (true (cons V1310 V1311))))

(defun shen.record-exceptions (V1312 V1313) (let CurrExceptions (trap-error (get V1313 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V1312 CurrExceptions) (put V1313 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.packageh (V1322 V1323 V1324) (cond ((cons? V1324) (cons (shen.packageh V1322 V1323 (hd V1324)) (shen.packageh V1322 V1323 (tl V1324)))) ((or (shen.sysfunc? V1324) (or (variable? V1324) (or (element? V1324 V1323) (or (shen.doubleunderline? V1324) (shen.singleunderline? V1324))))) V1324) ((and (symbol? V1324) (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) (explode V1324)))) (concat V1322 V1324)) (true V1324)))



