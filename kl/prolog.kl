"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1616) (let Parse_shen.<predicate*> (shen.<predicate*> V1616) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1625 V1626) (cond ((and (cons? V1626) (and (cons? (tl V1626)) (= () (tl (tl V1626))))) (simple-error (cn "prolog syntax error in " (shen.app V1625 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1626)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1625 "
" shen.a))))))

(defun shen.next-50 (V1633 V1634) (cond ((= () V1634) "") ((= 0 V1633) "") ((cons? V1634) (cn (shen.decons-string (hd V1634)) (shen.next-50 (- V1633 1) (tl V1634)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1636) (cond ((and (cons? V1636) (and (= cons (hd V1636)) (and (cons? (tl V1636)) (and (cons? (tl (tl V1636))) (= () (tl (tl (tl V1636)))))))) (shen.app (shen.eval-cons V1636) " " shen.s)) (true (shen.app V1636 " " shen.r))))

(defun shen.insert-predicate (V1639 V1640) (cond ((and (cons? V1640) (and (cons? (tl V1640)) (= () (tl (tl V1640))))) (cons (cons V1639 (hd V1640)) (cons :- (tl V1640)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1642) (if (cons? (hd V1642)) (let Parse_X (hd (hd V1642)) (shen.pair (hd (shen.pair (tl (hd V1642)) (shen.hdtl V1642))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1644) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1644) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1644) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1646) (let Parse_shen.<head*> (shen.<head*> V1646) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1648) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1648) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1648) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1650) (if (cons? (hd V1650)) (let Parse_X (hd (hd V1650)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1650)) (shen.hdtl V1650))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1656) (cond ((and (cons? V1656) (and (= cons (hd V1656)) (and (cons? (tl V1656)) (and (cons? (tl (tl V1656))) (= () (tl (tl (tl V1656)))))))) (and (shen.legitimate-term? (hd (tl V1656))) (shen.legitimate-term? (hd (tl (tl V1656)))))) ((and (cons? V1656) (and (= mode (hd V1656)) (and (cons? (tl V1656)) (and (cons? (tl (tl V1656))) (and (= + (hd (tl (tl V1656)))) (= () (tl (tl (tl V1656))))))))) (shen.legitimate-term? (hd (tl V1656)))) ((and (cons? V1656) (and (= mode (hd V1656)) (and (cons? (tl V1656)) (and (cons? (tl (tl V1656))) (and (= - (hd (tl (tl V1656)))) (= () (tl (tl (tl V1656))))))))) (shen.legitimate-term? (hd (tl V1656)))) ((cons? V1656) false) (true true)))

(defun shen.eval-cons (V1658) (cond ((and (cons? V1658) (and (= cons (hd V1658)) (and (cons? (tl V1658)) (and (cons? (tl (tl V1658))) (= () (tl (tl (tl V1658)))))))) (cons (shen.eval-cons (hd (tl V1658))) (shen.eval-cons (hd (tl (tl V1658)))))) ((and (cons? V1658) (and (= mode (hd V1658)) (and (cons? (tl V1658)) (and (cons? (tl (tl V1658))) (= () (tl (tl (tl V1658)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1658))) (tl (tl V1658))))) (true V1658)))

(defun shen.<body*> (V1660) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1660) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1660) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1662) (let YaccParse (if (and (cons? (hd V1662)) (= ! (hd (hd V1662)))) (shen.pair (hd (shen.pair (tl (hd V1662)) (shen.hdtl V1662))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1662)) (let Parse_X (hd (hd V1662)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1662)) (shen.hdtl V1662))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1664) (if (cons? (hd V1664)) (let Parse_X (hd (hd V1664)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1664)) (shen.hdtl V1664))) Parse_X) (fail))) (fail)))

(defun cut (V1668 V1669 V1670) (let Result (thaw V1670) (if (= Result false) V1668 Result)))

(defun shen.insert_modes (V1672) (cond ((and (cons? V1672) (and (= mode (hd V1672)) (and (cons? (tl V1672)) (and (cons? (tl (tl V1672))) (= () (tl (tl (tl V1672)))))))) V1672) ((= () V1672) ()) ((cons? V1672) (cons (cons mode (cons (hd V1672) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1672)) (cons - ()))))) (true V1672)))

(defun shen.s-prolog (V1674) (map (lambda X (eval X)) (shen.prolog->shen V1674)))

(defun shen.prolog->shen (V1676) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1676)))))

(defun shen.s-prolog_clause (V1678) (cond ((and (cons? V1678) (and (cons? (tl V1678)) (and (= :- (hd (tl V1678))) (and (cons? (tl (tl V1678))) (= () (tl (tl (tl V1678)))))))) (cons (hd V1678) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1678)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1680) (cond ((and (cons? V1680) (and (cons? (tl V1680)) (and (= :- (hd (tl V1680))) (and (cons? (tl (tl V1680))) (and (= () (tl (tl (tl V1680)))) (< (shen.complexity_head (hd V1680)) (value shen.*maxcomplexity*))))))) (cons V1680 ())) ((and (cons? V1680) (and (cons? (hd V1680)) (and (cons? (tl V1680)) (and (= :- (hd (tl V1680))) (and (cons? (tl (tl V1680))) (= () (tl (tl (tl V1680))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1680))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1680)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1680)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1680)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1686) (cond ((cons? V1686) (shen.product (map (lambda X (shen.complexity X)) (tl V1686)))) (true (shen.f_error shen.complexity_head))))

(defun shen.complexity (V1695) (cond ((and (cons? V1695) (and (= mode (hd V1695)) (and (cons? (tl V1695)) (and (cons? (hd (tl V1695))) (and (= mode (hd (hd (tl V1695)))) (and (cons? (tl (hd (tl V1695)))) (and (cons? (tl (tl (hd (tl V1695))))) (and (= () (tl (tl (tl (hd (tl V1695)))))) (and (cons? (tl (tl V1695))) (= () (tl (tl (tl V1695))))))))))))) (shen.complexity (hd (tl V1695)))) ((and (cons? V1695) (and (= mode (hd V1695)) (and (cons? (tl V1695)) (and (cons? (hd (tl V1695))) (and (cons? (tl (tl V1695))) (and (= + (hd (tl (tl V1695)))) (= () (tl (tl (tl V1695)))))))))) (* 2 (* (shen.complexity (cons mode (cons (hd (hd (tl V1695))) (tl (tl V1695))))) (shen.complexity (cons mode (cons (tl (hd (tl V1695))) (tl (tl V1695)))))))) ((and (cons? V1695) (and (= mode (hd V1695)) (and (cons? (tl V1695)) (and (cons? (hd (tl V1695))) (and (cons? (tl (tl V1695))) (and (= - (hd (tl (tl V1695)))) (= () (tl (tl (tl V1695)))))))))) (* (shen.complexity (cons mode (cons (hd (hd (tl V1695))) (tl (tl V1695))))) (shen.complexity (cons mode (cons (tl (hd (tl V1695))) (tl (tl V1695))))))) ((and (cons? V1695) (and (= mode (hd V1695)) (and (cons? (tl V1695)) (and (cons? (tl (tl V1695))) (and (= () (tl (tl (tl V1695)))) (variable? (hd (tl V1695)))))))) 1) ((and (cons? V1695) (and (= mode (hd V1695)) (and (cons? (tl V1695)) (and (cons? (tl (tl V1695))) (and (= + (hd (tl (tl V1695)))) (= () (tl (tl (tl V1695))))))))) 2) ((and (cons? V1695) (and (= mode (hd V1695)) (and (cons? (tl V1695)) (and (cons? (tl (tl V1695))) (and (= - (hd (tl (tl V1695)))) (= () (tl (tl (tl V1695))))))))) 1) (true (shen.complexity (cons mode (cons V1695 (cons + ())))))))

(defun shen.product (V1697) (cond ((= () V1697) 1) ((cons? V1697) (* (hd V1697) (shen.product (tl V1697)))) (true (shen.f_error shen.product))))

(defun shen.s-prolog_literal (V1699) (cond ((and (cons? V1699) (and (= is (hd V1699)) (and (cons? (tl V1699)) (and (cons? (tl (tl V1699))) (= () (tl (tl (tl V1699)))))))) (cons bind (cons (hd (tl V1699)) (cons (shen.insert_deref (hd (tl (tl V1699)))) ())))) ((and (cons? V1699) (and (= when (hd V1699)) (and (cons? (tl V1699)) (= () (tl (tl V1699)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1699))) ()))) ((and (cons? V1699) (and (= bind (hd V1699)) (and (cons? (tl V1699)) (and (cons? (tl (tl V1699))) (= () (tl (tl (tl V1699)))))))) (cons bind (cons (hd (tl V1699)) (cons (shen.insert_lazyderef (hd (tl (tl V1699)))) ())))) ((and (cons? V1699) (and (= fwhen (hd V1699)) (and (cons? (tl V1699)) (= () (tl (tl V1699)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1699))) ()))) ((cons? V1699) V1699) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1701) (cond ((variable? V1701) (cons shen.deref (cons V1701 (cons ProcessN ())))) ((cons? V1701) (cons (shen.insert_deref (hd V1701)) (shen.insert_deref (tl V1701)))) (true V1701)))

(defun shen.insert_lazyderef (V1703) (cond ((variable? V1703) (cons shen.lazyderef (cons V1703 (cons ProcessN ())))) ((cons? V1703) (cons (shen.insert_lazyderef (hd V1703)) (shen.insert_lazyderef (tl V1703)))) (true V1703)))

(defun shen.group_clauses (V1705) (cond ((= () V1705) ()) ((cons? V1705) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1705) X)) V1705) (let Rest (difference V1705 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1710 V1711) (cond ((= () V1711) ()) ((cons? V1711) (if (V1710 (hd V1711)) (cons (hd V1711) (shen.collect V1710 (tl V1711))) (shen.collect V1710 (tl V1711)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1730 V1731) (cond ((and (cons? V1730) (and (cons? (hd V1730)) (and (cons? V1731) (cons? (hd V1731))))) (= (hd (hd V1730)) (hd (hd V1731)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1733) (let F (shen.procedure_name V1733) (let Shen (shen.clauses-to-shen F V1733) Shen)))

(defun shen.procedure_name (V1747) (cond ((and (cons? V1747) (and (cons? (hd V1747)) (cons? (hd (hd V1747))))) (hd (hd (hd V1747)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1750 V1751) (let Linear (map (lambda X (shen.linearise-clause X)) V1751) (let Arity (shen.prolog-aritycheck V1750 (map (lambda X (head X)) V1751)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1750 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1753) (cond ((not (shen.occurs? cut V1753)) V1753) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1753 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1761 V1762) (cond ((= V1762 V1761) false) (true V1762)))

(defun shen.nest-disjunct (V1764) (cond ((and (cons? V1764) (= () (tl V1764))) (hd V1764)) ((cons? V1764) (shen.lisp-or (hd V1764) (shen.nest-disjunct (tl V1764)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1767 V1768) (cons let (cons Case (cons V1767 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1768 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1773 V1774) (cond ((and (cons? V1774) (= () (tl V1774))) (- (length (hd V1774)) 1)) ((and (cons? V1774) (cons? (tl V1774))) (if (= (length (hd V1774)) (length (hd (tl V1774)))) (shen.prolog-aritycheck V1773 (tl V1774)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1773 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1776) (cond ((and (cons? V1776) (and (cons? (tl V1776)) (and (= :- (hd (tl V1776))) (and (cons? (tl (tl V1776))) (= () (tl (tl (tl V1776)))))))) (let Linear (shen.linearise (cons (hd V1776) (tl (tl V1776)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1778) (cond ((and (cons? V1778) (and (cons? (tl V1778)) (= () (tl (tl V1778))))) (cons (shen.explicit_modes (hd V1778)) (cons :- (cons (shen.cf_help (hd (tl V1778))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1780) (cond ((cons? V1780) (cons (hd V1780) (map (lambda X (shen.em_help X)) (tl V1780)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1782) (cond ((and (cons? V1782) (and (= mode (hd V1782)) (and (cons? (tl V1782)) (and (cons? (tl (tl V1782))) (= () (tl (tl (tl V1782)))))))) V1782) (true (cons mode (cons V1782 (cons + ()))))))

(defun shen.cf_help (V1784) (cond ((and (cons? V1784) (and (= where (hd V1784)) (and (cons? (tl V1784)) (and (cons? (hd (tl V1784))) (and (= = (hd (hd (tl V1784)))) (and (cons? (tl (hd (tl V1784)))) (and (cons? (tl (tl (hd (tl V1784))))) (and (= () (tl (tl (tl (hd (tl V1784)))))) (and (cons? (tl (tl V1784))) (= () (tl (tl (tl V1784))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1784)))) (shen.cf_help (hd (tl (tl V1784)))))) (true V1784)))

(defun occurs-check (V1790) (cond ((= + V1790) (set shen.*occurs* true)) ((= - V1790) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1793 V1794) (cond ((and (cons? V1793) (and (cons? (hd V1793)) (and (cons? (tl V1793)) (and (= :- (hd (tl V1793))) (and (cons? (tl (tl V1793))) (= () (tl (tl (tl V1793))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1793)) (cons (shen.continuation_call (tl (hd V1793)) (hd (tl (tl V1793)))) ()))) V1794) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1797 V1798) (let VTerms (cons ProcessN (shen.extract_vars V1797)) (let VBody (shen.extract_vars V1798) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1798)))))

(defun remove (V1801 V1802) (shen.remove-h V1801 V1802 ()))

(defun shen.remove-h (V1809 V1810 V1811) (cond ((= () V1810) (reverse V1811)) ((and (cons? V1810) (= (hd V1810) V1809)) (shen.remove-h (hd V1810) (tl V1810) V1811)) ((cons? V1810) (shen.remove-h V1809 (tl V1810) (cons (hd V1810) V1811))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V1814 V1815) (cond ((and (= () V1814) (= () V1815)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V1815) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1814 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V1814) (cons call (cons shen.the (cons shen.continuation (cons V1815 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1814 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V1815 ())))) ())))))))))))

(defun shen.make_mu_application (V1818 V1819) (cond ((and (cons? V1818) (and (= shen.mu (hd V1818)) (and (cons? (tl V1818)) (and (= () (hd (tl V1818))) (and (cons? (tl (tl V1818))) (and (= () (tl (tl (tl V1818)))) (= () V1819))))))) (hd (tl (tl V1818)))) ((and (cons? V1818) (and (= shen.mu (hd V1818)) (and (cons? (tl V1818)) (and (cons? (hd (tl V1818))) (and (cons? (tl (tl V1818))) (and (= () (tl (tl (tl V1818)))) (cons? V1819))))))) (cons (cons shen.mu (cons (hd (hd (tl V1818))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V1818))) (tl (tl V1818)))) (tl V1819)) ()))) (cons (hd V1819) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V1828 V1829) (cond ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (hd (tl (hd V1828)))) (and (= mode (hd (hd (tl (hd V1828))))) (and (cons? (tl (hd (tl (hd V1828))))) (and (cons? (tl (tl (hd (tl (hd V1828)))))) (and (= () (tl (tl (tl (hd (tl (hd V1828))))))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (= () (tl (tl V1828))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V1828))))) (tl (tl (hd V1828))))) (tl V1828)) (hd (tl (tl (hd (tl (hd V1828)))))))) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (= _ (hd (tl (hd V1828)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V1828)))) V1829)) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (shen.ephemeral_variable? (hd (tl (hd V1828))) (hd (tl V1828))))))))))) (subst (hd (tl V1828)) (hd (tl (hd V1828))) (shen.mu_reduction (hd (tl (tl (hd V1828)))) V1829))) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (variable? (hd (tl (hd V1828)))))))))))) (cons let (cons (hd (tl (hd V1828))) (cons shen.be (cons (hd (tl V1828)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1828)))) V1829) ()))))))) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (and (= - V1829) (shen.prolog_constant? (hd (tl (hd V1828))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1828))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1828))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1828)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (and (= + V1829) (shen.prolog_constant? (hd (tl (hd V1828))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1828))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1828))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1828)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V1828))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1828)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (hd (tl (hd V1828)))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (= - V1829)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1828))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1828)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1828)))) (tl (tl (hd V1828))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1828) (and (cons? (hd V1828)) (and (= shen.mu (hd (hd V1828))) (and (cons? (tl (hd V1828))) (and (cons? (hd (tl (hd V1828)))) (and (cons? (tl (tl (hd V1828)))) (and (= () (tl (tl (tl (hd V1828))))) (and (cons? (tl V1828)) (and (= () (tl (tl V1828))) (= + V1829)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1828))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1828)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1828)))) (tl (tl (hd V1828))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V1828)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V1828))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1828)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V1828)))

(defun shen.rcons_form (V1831) (cond ((cons? V1831) (cons cons (cons (shen.rcons_form (hd V1831)) (cons (shen.rcons_form (tl V1831)) ())))) (true V1831)))

(defun shen.remove_modes (V1833) (cond ((and (cons? V1833) (and (= mode (hd V1833)) (and (cons? (tl V1833)) (and (cons? (tl (tl V1833))) (and (= + (hd (tl (tl V1833)))) (= () (tl (tl (tl V1833))))))))) (shen.remove_modes (hd (tl V1833)))) ((and (cons? V1833) (and (= mode (hd V1833)) (and (cons? (tl V1833)) (and (cons? (tl (tl V1833))) (and (= - (hd (tl (tl V1833)))) (= () (tl (tl (tl V1833))))))))) (shen.remove_modes (hd (tl V1833)))) ((cons? V1833) (cons (shen.remove_modes (hd V1833)) (shen.remove_modes (tl V1833)))) (true V1833)))

(defun shen.ephemeral_variable? (V1836 V1837) (and (variable? V1836) (variable? V1837)))

(defun shen.prolog_constant? (V1847) (cond ((cons? V1847) false) (true true)))

(defun shen.aum_to_shen (V1849) (cond ((and (cons? V1849) (and (= let (hd V1849)) (and (cons? (tl V1849)) (and (cons? (tl (tl V1849))) (and (= shen.be (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (cons? (tl (tl (tl (tl V1849))))) (and (= in (hd (tl (tl (tl (tl V1849)))))) (and (cons? (tl (tl (tl (tl (tl V1849)))))) (= () (tl (tl (tl (tl (tl (tl V1849)))))))))))))))) (cons let (cons (hd (tl V1849)) (cons (shen.aum_to_shen (hd (tl (tl (tl V1849))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1849))))))) ()))))) ((and (cons? V1849) (and (= shen.the (hd V1849)) (and (cons? (tl V1849)) (and (= shen.result (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.of (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (= shen.dereferencing (hd (tl (tl (tl V1849))))) (and (cons? (tl (tl (tl (tl V1849))))) (= () (tl (tl (tl (tl (tl V1849))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V1849)))))) (cons ProcessN ())))) ((and (cons? V1849) (and (= if (hd V1849)) (and (cons? (tl V1849)) (and (cons? (tl (tl V1849))) (and (= shen.then (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (cons? (tl (tl (tl (tl V1849))))) (and (= shen.else (hd (tl (tl (tl (tl V1849)))))) (and (cons? (tl (tl (tl (tl (tl V1849)))))) (= () (tl (tl (tl (tl (tl (tl V1849)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V1849))) (cons (shen.aum_to_shen (hd (tl (tl (tl V1849))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1849))))))) ()))))) ((and (cons? V1849) (and (cons? (tl V1849)) (and (= is (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.a (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (= shen.variable (hd (tl (tl (tl V1849))))) (= () (tl (tl (tl (tl V1849)))))))))))) (cons shen.pvar? (cons (hd V1849) ()))) ((and (cons? V1849) (and (cons? (tl V1849)) (and (= is (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.a (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (= shen.non-empty (hd (tl (tl (tl V1849))))) (and (cons? (tl (tl (tl (tl V1849))))) (and (= list (hd (tl (tl (tl (tl V1849)))))) (= () (tl (tl (tl (tl (tl V1849))))))))))))))) (cons cons? (cons (hd V1849) ()))) ((and (cons? V1849) (and (= shen.rename (hd V1849)) (and (cons? (tl V1849)) (and (= shen.the (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.variables (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (= in (hd (tl (tl (tl V1849))))) (and (cons? (tl (tl (tl (tl V1849))))) (and (= () (hd (tl (tl (tl (tl V1849)))))) (and (cons? (tl (tl (tl (tl (tl V1849)))))) (and (= and (hd (tl (tl (tl (tl (tl V1849))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1849))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1849)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1849)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1849)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V1849)))))))))) ((and (cons? V1849) (and (= shen.rename (hd V1849)) (and (cons? (tl V1849)) (and (= shen.the (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.variables (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (= in (hd (tl (tl (tl V1849))))) (and (cons? (tl (tl (tl (tl V1849))))) (and (cons? (hd (tl (tl (tl (tl V1849)))))) (and (cons? (tl (tl (tl (tl (tl V1849)))))) (and (= and (hd (tl (tl (tl (tl (tl V1849))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1849))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1849)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1849)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1849)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V1849)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V1849)))))) (tl (tl (tl (tl (tl V1849))))))))))) ()))))) ((and (cons? V1849) (and (= bind (hd V1849)) (and (cons? (tl V1849)) (and (cons? (tl (tl V1849))) (and (= shen.to (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (cons? (tl (tl (tl (tl V1849))))) (and (= in (hd (tl (tl (tl (tl V1849)))))) (and (cons? (tl (tl (tl (tl (tl V1849)))))) (= () (tl (tl (tl (tl (tl (tl V1849)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V1849)) (cons (shen.chwild (hd (tl (tl (tl V1849))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1849))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V1849)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V1849) (and (cons? (tl V1849)) (and (= is (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= identical (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (and (= shen.to (hd (tl (tl (tl V1849))))) (and (cons? (tl (tl (tl (tl V1849))))) (= () (tl (tl (tl (tl (tl V1849)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V1849))))) (cons (hd V1849) ())))) ((= shen.failed! V1849) false) ((and (cons? V1849) (and (= shen.the (hd V1849)) (and (cons? (tl V1849)) (and (= head (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.of (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (= () (tl (tl (tl (tl V1849)))))))))))) (cons hd (tl (tl (tl V1849))))) ((and (cons? V1849) (and (= shen.the (hd V1849)) (and (cons? (tl V1849)) (and (= tail (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.of (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (= () (tl (tl (tl (tl V1849)))))))))))) (cons tl (tl (tl (tl V1849))))) ((and (cons? V1849) (and (= shen.pop (hd V1849)) (and (cons? (tl V1849)) (and (= shen.the (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.stack (hd (tl (tl V1849)))) (= () (tl (tl (tl V1849)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V1849) (and (= call (hd V1849)) (and (cons? (tl V1849)) (and (= shen.the (hd (tl V1849))) (and (cons? (tl (tl V1849))) (and (= shen.continuation (hd (tl (tl V1849)))) (and (cons? (tl (tl (tl V1849)))) (= () (tl (tl (tl (tl V1849)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V1849))))) ProcessN Continuation) ())))) (true V1849)))

(defun shen.chwild (V1851) (cond ((= V1851 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V1851) (map (lambda Z (shen.chwild Z)) V1851)) (true V1851)))

(defun shen.newpv (V1853) (let Count+1 (+ (<-address (value shen.*varcounter*) V1853) 1) (let IncVar (address-> (value shen.*varcounter*) V1853 Count+1) (let Vector (<-address (value shen.*prologvectors*) V1853) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V1853 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V1856 V1857) (let Vector (<-address (value shen.*prologvectors*) V1856) (let BigVector (shen.resize-vector Vector (+ V1857 V1857) shen.-null-) (address-> (value shen.*prologvectors*) V1856 BigVector))))

(defun shen.resize-vector (V1861 V1862 V1863) (let BigVector (address-> (absvector (+ 1 V1862)) 0 V1862) (shen.copy-vector V1861 BigVector (limit V1861) V1862 V1863)))

(defun shen.copy-vector (V1869 V1870 V1871 V1872 V1873) (shen.copy-vector-stage-2 (+ 1 V1871) (+ V1872 1) V1873 (shen.copy-vector-stage-1 1 V1869 V1870 (+ 1 V1871))))

(defun shen.copy-vector-stage-1 (V1881 V1882 V1883 V1884) (cond ((= V1884 V1881) V1883) (true (shen.copy-vector-stage-1 (+ 1 V1881) V1882 (address-> V1883 V1881 (<-address V1882 V1881)) V1884))))

(defun shen.copy-vector-stage-2 (V1892 V1893 V1894 V1895) (cond ((= V1893 V1892) V1895) (true (shen.copy-vector-stage-2 (+ V1892 1) V1893 V1894 (address-> V1895 V1892 V1894)))))

(defun shen.mk-pvar (V1897) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V1897))

(defun shen.pvar? (V1899) (trap-error (and (absvector? V1899) (= (<-address V1899 0) shen.pvar)) (lambda E false)))

(defun shen.bindv (V1903 V1904 V1905) (let Vector (<-address (value shen.*prologvectors*) V1905) (address-> Vector (<-address V1903 1) V1904)))

(defun shen.unbindv (V1908 V1909) (let Vector (<-address (value shen.*prologvectors*) V1909) (address-> Vector (<-address V1908 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V1913 V1914 V1915) (cond ((and (cons? V1913) (and (cons? (hd V1913)) (= () (tl V1913)))) (cons (hd (hd V1913)) (append (tl (hd V1913)) (cons V1914 (cons V1915 ()))))) ((and (cons? V1913) (cons? (hd V1913))) (let NewContinuation (shen.newcontinuation (tl V1913) V1914 V1915) (cons (hd (hd V1913)) (append (tl (hd V1913)) (cons V1914 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V1919 V1920 V1921) (cond ((= () V1919) V1921) ((and (cons? V1919) (cons? (hd V1919))) (cons freeze (cons (cons (hd (hd V1919)) (append (tl (hd V1919)) (cons V1920 (cons (shen.newcontinuation (tl V1919) V1920 V1921) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V1929 V1930 V1931) (shen.deref V1929 V1930))

(defun shen.measure&return (V1939 V1940 V1941) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V1939 V1940)))

(defun unify (V1946 V1947 V1948 V1949) (shen.lzy= (shen.lazyderef V1946 V1948) (shen.lazyderef V1947 V1948) V1948 V1949))

(defun shen.lzy= (V1971 V1972 V1973 V1974) (cond ((= V1972 V1971) (thaw V1974)) ((shen.pvar? V1971) (bind V1971 V1972 V1973 V1974)) ((shen.pvar? V1972) (bind V1972 V1971 V1973 V1974)) ((and (cons? V1971) (cons? V1972)) (shen.lzy= (shen.lazyderef (hd V1971) V1973) (shen.lazyderef (hd V1972) V1973) V1973 (freeze (shen.lzy= (shen.lazyderef (tl V1971) V1973) (shen.lazyderef (tl V1972) V1973) V1973 V1974)))) (true false)))

(defun shen.deref (V1977 V1978) (cond ((cons? V1977) (cons (shen.deref (hd V1977) V1978) (shen.deref (tl V1977) V1978))) (true (if (shen.pvar? V1977) (let Value (shen.valvector V1977 V1978) (if (= Value shen.-null-) V1977 (shen.deref Value V1978))) V1977))))

(defun shen.lazyderef (V1981 V1982) (if (shen.pvar? V1981) (let Value (shen.valvector V1981 V1982) (if (= Value shen.-null-) V1981 (shen.lazyderef Value V1982))) V1981))

(defun shen.valvector (V1985 V1986) (<-address (<-address (value shen.*prologvectors*) V1986) (<-address V1985 1)))

(defun unify! (V1991 V1992 V1993 V1994) (shen.lzy=! (shen.lazyderef V1991 V1993) (shen.lazyderef V1992 V1993) V1993 V1994))

(defun shen.lzy=! (V2016 V2017 V2018 V2019) (cond ((= V2017 V2016) (thaw V2019)) ((and (shen.pvar? V2016) (not (shen.occurs? V2016 (shen.deref V2017 V2018)))) (bind V2016 V2017 V2018 V2019)) ((and (shen.pvar? V2017) (not (shen.occurs? V2017 (shen.deref V2016 V2018)))) (bind V2017 V2016 V2018 V2019)) ((and (cons? V2016) (cons? V2017)) (shen.lzy=! (shen.lazyderef (hd V2016) V2018) (shen.lazyderef (hd V2017) V2018) V2018 (freeze (shen.lzy=! (shen.lazyderef (tl V2016) V2018) (shen.lazyderef (tl V2017) V2018) V2018 V2019)))) (true false)))

(defun shen.occurs? (V2031 V2032) (cond ((= V2032 V2031) true) ((cons? V2032) (or (shen.occurs? V2031 (hd V2032)) (shen.occurs? V2031 (tl V2032)))) (true false)))

(defun identical (V2037 V2038 V2039 V2040) (shen.lzy== (shen.lazyderef V2037 V2039) (shen.lazyderef V2038 V2039) V2039 V2040))

(defun shen.lzy== (V2062 V2063 V2064 V2065) (cond ((= V2063 V2062) (thaw V2065)) ((and (cons? V2062) (cons? V2063)) (shen.lzy== (shen.lazyderef (hd V2062) V2064) (shen.lazyderef (hd V2063) V2064) V2064 (freeze (shen.lzy== (tl V2062) (tl V2063) V2064 V2065)))) (true false)))

(defun shen.pvar (V2067) (cn "Var" (shen.app (<-address V2067 1) "" shen.a)))

(defun bind (V2072 V2073 V2074 V2075) (do (shen.bindv V2072 V2073 V2074) (let Result (thaw V2075) (do (shen.unbindv V2072 V2074) Result))))

(defun fwhen (V2093 V2094 V2095) (cond ((= true V2093) (thaw V2095)) ((= false V2093) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2093 "%" shen.s))))))

(defun call (V2111 V2112 V2113) (cond ((cons? V2111) (shen.call-help (function (shen.lazyderef (hd V2111) V2112)) (tl V2111) V2112 V2113)) (true false)))

(defun shen.call-help (V2118 V2119 V2120 V2121) (cond ((= () V2119) (V2118 V2120 V2121)) ((cons? V2119) (shen.call-help (V2118 (hd V2119)) (tl V2119) V2120 V2121)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2123) (cond ((and (cons? V2123) (cons? (hd V2123))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2123)) (shen.insert-prolog-variables (cons (tl (hd V2123)) (cons (tl V2123) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2127 V2128 V2129) (cond ((and (cons? V2128) (and (cons? (tl V2128)) (= () (tl (tl V2128))))) (shen.intprolog-help-help V2127 (hd V2128) (hd (tl V2128)) V2129)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2134 V2135 V2136 V2137) (cond ((= () V2135) (V2134 V2137 (freeze (shen.call-rest V2136 V2137)))) ((cons? V2135) (shen.intprolog-help-help (V2134 (hd V2135)) (tl V2135) V2136 V2137)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2142 V2143) (cond ((= () V2142) true) ((and (cons? V2142) (and (cons? (hd V2142)) (cons? (tl (hd V2142))))) (shen.call-rest (cons (cons ((hd (hd V2142)) (hd (tl (hd V2142)))) (tl (tl (hd V2142)))) (tl V2142)) V2143)) ((and (cons? V2142) (and (cons? (hd V2142)) (= () (tl (hd V2142))))) ((hd (hd V2142)) V2143 (freeze (shen.call-rest (tl V2142) V2143)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2146 V2147) (shen.insert-prolog-variables-help V2146 (shen.flatten V2146) V2147))

(defun shen.insert-prolog-variables-help (V2155 V2156 V2157) (cond ((= () V2156) V2155) ((and (cons? V2156) (variable? (hd V2156))) (let V (shen.newpv V2157) (let XV/Y (subst V (hd V2156) V2155) (let Z-Y (remove (hd V2156) (tl V2156)) (shen.insert-prolog-variables-help XV/Y Z-Y V2157))))) ((cons? V2156) (shen.insert-prolog-variables-help V2155 (tl V2156) V2157)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2159) (let Vector (address-> (value shen.*prologvectors*) V2159 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2159 1) V2159)))



