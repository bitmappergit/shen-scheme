"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V2461) (cond ((and (cons? V2461) (and (= defcc (hd V2461)) (cons? (tl V2461)))) (shen.yacc->shen (hd (tl V2461)) (tl (tl V2461)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V2462 V2463) (let CCRules (shen.split_cc_rules true V2463 ()) (let CCBody (map (lambda V2459 (shen.cc_body V2459)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2462 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2464) (cond ((> (occurrences kill V2464) 0) (cons trap-error (cons V2464 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2464)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2465) (let String (error-to-string V2465) (if (= String "yacc kill") (fail) V2465)))

(defun shen.split_cc_rules (V2468 V2469 V2470) (cond ((and (= () V2469) (= () V2470)) ()) ((= () V2469) (cons (shen.split_cc_rule V2468 (reverse V2470) ()) ())) ((and (cons? V2469) (= ; (hd V2469))) (cons (shen.split_cc_rule V2468 (reverse V2470) ()) (shen.split_cc_rules V2468 (tl V2469) ()))) ((cons? V2469) (shen.split_cc_rules V2468 (tl V2469) (cons (hd V2469) V2470))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2475 V2476 V2477) (cond ((and (cons? V2476) (and (= := (hd V2476)) (and (cons? (tl V2476)) (= () (tl (tl V2476)))))) (cons (reverse V2477) (tl V2476))) ((and (cons? V2476) (and (= := (hd V2476)) (and (cons? (tl V2476)) (and (cons? (tl (tl V2476))) (and (= where (hd (tl (tl V2476)))) (and (cons? (tl (tl (tl V2476)))) (= () (tl (tl (tl (tl V2476))))))))))) (cons (reverse V2477) (cons (cons where (cons (hd (tl (tl (tl V2476)))) (cons (hd (tl V2476)) ()))) ()))) ((= () V2476) (do (shen.semantic-completion-warning V2475 V2477) (shen.split_cc_rule V2475 (cons := (cons (shen.default_semantics (reverse V2477)) ())) V2477))) ((cons? V2476) (shen.split_cc_rule V2475 (tl V2476) (cons (hd V2476) V2477))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V2486 V2487) (cond ((= true V2486) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V2487)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V2488) (cond ((= () V2488) ()) ((and (cons? V2488) (and (= () (tl V2488)) (shen.grammar_symbol? (hd V2488)))) (hd V2488)) ((and (cons? V2488) (shen.grammar_symbol? (hd V2488))) (cons append (cons (hd V2488) (cons (shen.default_semantics (tl V2488)) ())))) ((cons? V2488) (cons cons (cons (hd V2488) (cons (shen.default_semantics (tl V2488)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V2489) (and (symbol? V2489) (let Cs (shen.strip-pathname (explode V2489)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V2490) (cond ((and (cons? V2490) (= () (tl V2490))) (hd V2490)) ((cons? V2490) (let P YaccParse (cons let (cons P (cons (hd V2490) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V2490)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V2491) (cond ((and (cons? V2491) (and (cons? (tl V2491)) (= () (tl (tl V2491))))) (shen.syntax (hd V2491) Stream (hd (tl V2491)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V2492 V2493 V2494) (cond ((and (= () V2492) (and (cons? V2494) (and (= where (hd V2494)) (and (cons? (tl V2494)) (and (cons? (tl (tl V2494))) (= () (tl (tl (tl V2494))))))))) (cons if (cons (shen.semantics (hd (tl V2494))) (cons (cons shen.pair (cons (cons hd (cons V2493 ())) (cons (shen.semantics (hd (tl (tl V2494)))) ()))) (cons (cons fail ()) ()))))) ((= () V2492) (cons shen.pair (cons (cons hd (cons V2493 ())) (cons (shen.semantics V2494) ())))) ((cons? V2492) (if (shen.grammar_symbol? (hd V2492)) (shen.recursive_descent V2492 V2493 V2494) (if (variable? (hd V2492)) (shen.variable-match V2492 V2493 V2494) (if (shen.jump_stream? (hd V2492)) (shen.jump_stream V2492 V2493 V2494) (if (shen.terminal? (hd V2492)) (shen.check_stream V2492 V2493 V2494) (if (cons? (hd V2492)) (shen.list-stream (shen.decons (hd V2492)) (tl V2492) V2493 V2494) (simple-error (shen.app (hd V2492) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V2495 V2496 V2497 V2498) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2497 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2497 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V2496 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2497 ())) ())) (cons (cons hd (cons (cons tl (cons V2497 ())) ())) ()))) V2498) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V2495 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2497 ())) ())) (cons (cons hd (cons (cons tl (cons V2497 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V2499) (cond ((and (cons? V2499) (and (= cons (hd V2499)) (and (cons? (tl V2499)) (and (cons? (tl (tl V2499))) (and (= () (hd (tl (tl V2499)))) (= () (tl (tl (tl V2499))))))))) (cons (hd (tl V2499)) ())) ((and (cons? V2499) (and (= cons (hd V2499)) (and (cons? (tl V2499)) (and (cons? (tl (tl V2499))) (= () (tl (tl (tl V2499)))))))) (cons (hd (tl V2499)) (shen.decons (hd (tl (tl V2499)))))) (true V2499)))

(defun shen.insert-runon (V2511 V2512 V2513) (cond ((and (cons? V2513) (and (= shen.pair (hd V2513)) (and (cons? (tl V2513)) (and (cons? (tl (tl V2513))) (and (= () (tl (tl (tl V2513)))) (= (hd (tl (tl V2513))) V2512)))))) V2511) ((cons? V2513) (map (lambda Z (shen.insert-runon V2511 V2512 Z)) V2513)) (true V2513)))

(defun shen.strip-pathname (V2518) (cond ((not (element? "." V2518)) V2518) ((cons? V2518) (shen.strip-pathname (tl V2518))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V2519 V2520 V2521) (cond ((cons? V2519) (let Test (cons (hd V2519) (cons V2520 ())) (let Action (shen.syntax (tl V2519) (concat Parse_ (hd V2519)) V2521) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2519)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2519)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V2522 V2523 V2524) (cond ((cons? V2522) (let Test (cons cons? (cons (cons hd (cons V2523 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2522)) (cons (cons hd (cons (cons hd (cons V2523 ())) ())) (cons (shen.syntax (tl V2522) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2523 ())) ())) (cons (cons shen.hdtl (cons V2523 ())) ()))) V2524) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V2533) (cond ((cons? V2533) false) ((variable? V2533) false) (true true)))

(defun shen.jump_stream? (V2538) (cond ((= V2538 _) true) (true false)))

(defun shen.check_stream (V2539 V2540 V2541) (cond ((cons? V2539) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2540 ())) ())) (cons (cons = (cons (hd V2539) (cons (cons hd (cons (cons hd (cons V2540 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2539) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2540 ())) ())) (cons (cons shen.hdtl (cons V2540 ())) ()))) V2541) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V2542 V2543 V2544) (cond ((cons? V2542) (let Test (cons cons? (cons (cons hd (cons V2543 ())) ())) (let Action (shen.syntax (tl V2542) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2543 ())) ())) (cons (cons shen.hdtl (cons V2543 ())) ()))) V2544) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V2545) (cond ((= () V2545) ()) ((shen.grammar_symbol? V2545) (cons shen.hdtl (cons (concat Parse_ V2545) ()))) ((variable? V2545) (concat Parse_ V2545)) ((cons? V2545) (map (lambda V2460 (shen.semantics V2460)) V2545)) (true V2545)))

(defun shen.snd-or-fail (V2552) (cond ((and (cons? V2552) (and (cons? (tl V2552)) (= () (tl (tl V2552))))) (hd (tl V2552))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V2553 V2554) (cons V2553 (cons V2554 ())))

(defun shen.hdtl (V2555) (hd (tl V2555)))

(defun shen.<!> (V2562) (cond ((and (cons? V2562) (and (cons? (tl V2562)) (= () (tl (tl V2562))))) (cons () (cons (hd V2562) ()))) (true (fail))))

(defun <e> (V2567) (cond ((and (cons? V2567) (and (cons? (tl V2567)) (= () (tl (tl V2567))))) (cons (hd V2567) (cons () ()))) (true (shen.f_error <e>))))



