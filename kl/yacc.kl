"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V2462) (cond ((and (cons? V2462) (and (= defcc (hd V2462)) (cons? (tl V2462)))) (shen.yacc->shen (hd (tl V2462)) (tl (tl V2462)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V2463 V2464) (let CCRules (shen.split_cc_rules true V2464 ()) (let CCBody (map (lambda V2460 (shen.cc_body V2460)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2463 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2465) (cond ((> (occurrences kill V2465) 0) (cons trap-error (cons V2465 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2465)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2466) (let String (error-to-string V2466) (if (= String "yacc kill") (fail) V2466)))

(defun shen.split_cc_rules (V2469 V2470 V2471) (cond ((and (= () V2470) (= () V2471)) ()) ((= () V2470) (cons (shen.split_cc_rule V2469 (reverse V2471) ()) ())) ((and (cons? V2470) (= ; (hd V2470))) (cons (shen.split_cc_rule V2469 (reverse V2471) ()) (shen.split_cc_rules V2469 (tl V2470) ()))) ((cons? V2470) (shen.split_cc_rules V2469 (tl V2470) (cons (hd V2470) V2471))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2476 V2477 V2478) (cond ((and (cons? V2477) (and (= := (hd V2477)) (and (cons? (tl V2477)) (= () (tl (tl V2477)))))) (cons (reverse V2478) (tl V2477))) ((and (cons? V2477) (and (= := (hd V2477)) (and (cons? (tl V2477)) (and (cons? (tl (tl V2477))) (and (= where (hd (tl (tl V2477)))) (and (cons? (tl (tl (tl V2477)))) (= () (tl (tl (tl (tl V2477))))))))))) (cons (reverse V2478) (cons (cons where (cons (hd (tl (tl (tl V2477)))) (cons (hd (tl V2477)) ()))) ()))) ((= () V2477) (do (shen.semantic-completion-warning V2476 V2478) (shen.split_cc_rule V2476 (cons := (cons (shen.default_semantics (reverse V2478)) ())) V2478))) ((cons? V2477) (shen.split_cc_rule V2476 (tl V2477) (cons (hd V2477) V2478))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V2487 V2488) (cond ((= true V2487) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V2488)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V2489) (cond ((= () V2489) ()) ((and (cons? V2489) (and (= () (tl V2489)) (shen.grammar_symbol? (hd V2489)))) (hd V2489)) ((and (cons? V2489) (shen.grammar_symbol? (hd V2489))) (cons append (cons (hd V2489) (cons (shen.default_semantics (tl V2489)) ())))) ((cons? V2489) (cons cons (cons (hd V2489) (cons (shen.default_semantics (tl V2489)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V2490) (and (symbol? V2490) (let Cs (shen.strip-pathname (explode V2490)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V2491) (cond ((and (cons? V2491) (= () (tl V2491))) (hd V2491)) ((cons? V2491) (let P YaccParse (cons let (cons P (cons (hd V2491) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V2491)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V2492) (cond ((and (cons? V2492) (and (cons? (tl V2492)) (= () (tl (tl V2492))))) (shen.syntax (hd V2492) Stream (hd (tl V2492)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V2493 V2494 V2495) (cond ((and (= () V2493) (and (cons? V2495) (and (= where (hd V2495)) (and (cons? (tl V2495)) (and (cons? (tl (tl V2495))) (= () (tl (tl (tl V2495))))))))) (cons if (cons (shen.semantics (hd (tl V2495))) (cons (cons shen.pair (cons (cons hd (cons V2494 ())) (cons (shen.semantics (hd (tl (tl V2495)))) ()))) (cons (cons fail ()) ()))))) ((= () V2493) (cons shen.pair (cons (cons hd (cons V2494 ())) (cons (shen.semantics V2495) ())))) ((cons? V2493) (if (shen.grammar_symbol? (hd V2493)) (shen.recursive_descent V2493 V2494 V2495) (if (variable? (hd V2493)) (shen.variable-match V2493 V2494 V2495) (if (shen.jump_stream? (hd V2493)) (shen.jump_stream V2493 V2494 V2495) (if (shen.terminal? (hd V2493)) (shen.check_stream V2493 V2494 V2495) (if (cons? (hd V2493)) (shen.list-stream (shen.decons (hd V2493)) (tl V2493) V2494 V2495) (simple-error (shen.app (hd V2493) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V2496 V2497 V2498 V2499) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2498 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2498 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V2497 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2498 ())) ())) (cons (cons hd (cons (cons tl (cons V2498 ())) ())) ()))) V2499) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V2496 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2498 ())) ())) (cons (cons hd (cons (cons tl (cons V2498 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V2500) (cond ((and (cons? V2500) (and (= cons (hd V2500)) (and (cons? (tl V2500)) (and (cons? (tl (tl V2500))) (and (= () (hd (tl (tl V2500)))) (= () (tl (tl (tl V2500))))))))) (cons (hd (tl V2500)) ())) ((and (cons? V2500) (and (= cons (hd V2500)) (and (cons? (tl V2500)) (and (cons? (tl (tl V2500))) (= () (tl (tl (tl V2500)))))))) (cons (hd (tl V2500)) (shen.decons (hd (tl (tl V2500)))))) (true V2500)))

(defun shen.insert-runon (V2512 V2513 V2514) (cond ((and (cons? V2514) (and (= shen.pair (hd V2514)) (and (cons? (tl V2514)) (and (cons? (tl (tl V2514))) (and (= () (tl (tl (tl V2514)))) (= (hd (tl (tl V2514))) V2513)))))) V2512) ((cons? V2514) (map (lambda Z (shen.insert-runon V2512 V2513 Z)) V2514)) (true V2514)))

(defun shen.strip-pathname (V2519) (cond ((not (element? "." V2519)) V2519) ((cons? V2519) (shen.strip-pathname (tl V2519))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V2520 V2521 V2522) (cond ((cons? V2520) (let Test (cons (hd V2520) (cons V2521 ())) (let Action (shen.syntax (tl V2520) (concat Parse_ (hd V2520)) V2522) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2520)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2520)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V2523 V2524 V2525) (cond ((cons? V2523) (let Test (cons cons? (cons (cons hd (cons V2524 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2523)) (cons (cons hd (cons (cons hd (cons V2524 ())) ())) (cons (shen.syntax (tl V2523) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2524 ())) ())) (cons (cons shen.hdtl (cons V2524 ())) ()))) V2525) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V2534) (cond ((cons? V2534) false) ((variable? V2534) false) (true true)))

(defun shen.jump_stream? (V2539) (cond ((= V2539 _) true) (true false)))

(defun shen.check_stream (V2540 V2541 V2542) (cond ((cons? V2540) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2541 ())) ())) (cons (cons = (cons (hd V2540) (cons (cons hd (cons (cons hd (cons V2541 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2540) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2541 ())) ())) (cons (cons shen.hdtl (cons V2541 ())) ()))) V2542) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V2543 V2544 V2545) (cond ((cons? V2543) (let Test (cons cons? (cons (cons hd (cons V2544 ())) ())) (let Action (shen.syntax (tl V2543) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2544 ())) ())) (cons (cons shen.hdtl (cons V2544 ())) ()))) V2545) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V2546) (cond ((= () V2546) ()) ((shen.grammar_symbol? V2546) (cons shen.hdtl (cons (concat Parse_ V2546) ()))) ((variable? V2546) (concat Parse_ V2546)) ((cons? V2546) (map (lambda V2461 (shen.semantics V2461)) V2546)) (true V2546)))

(defun shen.snd-or-fail (V2553) (cond ((and (cons? V2553) (and (cons? (tl V2553)) (= () (tl (tl V2553))))) (hd (tl V2553))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V2554 V2555) (cons V2554 (cons V2555 ())))

(defun shen.hdtl (V2556) (hd (tl V2556)))

(defun shen.<!> (V2563) (cond ((and (cons? V2563) (and (cons? (tl V2563)) (= () (tl (tl V2563))))) (cons () (cons (hd V2563) ()))) (true (fail))))

(defun <e> (V2568) (cond ((and (cons? V2568) (and (cons? (tl V2568)) (= () (tl (tl V2568))))) (cons (hd V2568) (cons () ()))) (true (shen.f_error <e>))))



