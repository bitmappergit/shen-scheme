"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4054) (cond ((and (cons? V4054) (and (= defcc (hd V4054)) (cons? (tl V4054)))) (shen.yacc->shen (hd (tl V4054)) (tl (tl V4054)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4057 V4058) (let CCRules (shen.split_cc_rules true V4058 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4057 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4060) (cond ((> (occurrences kill V4060) 0) (cons trap-error (cons V4060 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4060)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4062) (let String (error-to-string V4062) (if (= String "yacc kill") (fail) V4062)))

(defun shen.split_cc_rules (V4068 V4069 V4070) (cond ((and (= () V4069) (= () V4070)) ()) ((= () V4069) (cons (shen.split_cc_rule V4068 (reverse V4070) ()) ())) ((and (cons? V4069) (= ; (hd V4069))) (cons (shen.split_cc_rule V4068 (reverse V4070) ()) (shen.split_cc_rules V4068 (tl V4069) ()))) ((cons? V4069) (shen.split_cc_rules V4068 (tl V4069) (cons (hd V4069) V4070))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4078 V4079 V4080) (cond ((and (cons? V4079) (and (= := (hd V4079)) (and (cons? (tl V4079)) (= () (tl (tl V4079)))))) (cons (reverse V4080) (tl V4079))) ((and (cons? V4079) (and (= := (hd V4079)) (and (cons? (tl V4079)) (and (cons? (tl (tl V4079))) (and (= where (hd (tl (tl V4079)))) (and (cons? (tl (tl (tl V4079)))) (= () (tl (tl (tl (tl V4079))))))))))) (cons (reverse V4080) (cons (cons where (cons (hd (tl (tl (tl V4079)))) (cons (hd (tl V4079)) ()))) ()))) ((= () V4079) (do (shen.semantic-completion-warning V4078 V4080) (shen.split_cc_rule V4078 (cons := (cons (shen.default_semantics (reverse V4080)) ())) V4080))) ((cons? V4079) (shen.split_cc_rule V4078 (tl V4079) (cons (hd V4079) V4080))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4091 V4092) (cond ((= true V4091) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4092)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4094) (cond ((= () V4094) ()) ((and (cons? V4094) (and (= () (tl V4094)) (shen.grammar_symbol? (hd V4094)))) (hd V4094)) ((and (cons? V4094) (shen.grammar_symbol? (hd V4094))) (cons append (cons (hd V4094) (cons (shen.default_semantics (tl V4094)) ())))) ((cons? V4094) (cons cons (cons (hd V4094) (cons (shen.default_semantics (tl V4094)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4096) (and (symbol? V4096) (let Cs (shen.strip-pathname (explode V4096)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4098) (cond ((and (cons? V4098) (= () (tl V4098))) (hd V4098)) ((cons? V4098) (let P YaccParse (cons let (cons P (cons (hd V4098) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4098)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4100) (cond ((and (cons? V4100) (and (cons? (tl V4100)) (= () (tl (tl V4100))))) (shen.syntax (hd V4100) Stream (hd (tl V4100)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4104 V4105 V4106) (cond ((and (= () V4104) (and (cons? V4106) (and (= where (hd V4106)) (and (cons? (tl V4106)) (and (cons? (tl (tl V4106))) (= () (tl (tl (tl V4106))))))))) (cons if (cons (shen.semantics (hd (tl V4106))) (cons (cons shen.pair (cons (cons hd (cons V4105 ())) (cons (shen.semantics (hd (tl (tl V4106)))) ()))) (cons (cons fail ()) ()))))) ((= () V4104) (cons shen.pair (cons (cons hd (cons V4105 ())) (cons (shen.semantics V4106) ())))) ((cons? V4104) (if (shen.grammar_symbol? (hd V4104)) (shen.recursive_descent V4104 V4105 V4106) (if (variable? (hd V4104)) (shen.variable-match V4104 V4105 V4106) (if (shen.jump_stream? (hd V4104)) (shen.jump_stream V4104 V4105 V4106) (if (shen.terminal? (hd V4104)) (shen.check_stream V4104 V4105 V4106) (if (cons? (hd V4104)) (shen.list-stream (shen.decons (hd V4104)) (tl V4104) V4105 V4106) (simple-error (shen.app (hd V4104) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4111 V4112 V4113 V4114) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4113 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4113 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4112 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4113 ())) ())) (cons (cons hd (cons (cons tl (cons V4113 ())) ())) ()))) V4114) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4111 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4113 ())) ())) (cons (cons hd (cons (cons tl (cons V4113 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4116) (cond ((and (cons? V4116) (and (= cons (hd V4116)) (and (cons? (tl V4116)) (and (cons? (tl (tl V4116))) (and (= () (hd (tl (tl V4116)))) (= () (tl (tl (tl V4116))))))))) (cons (hd (tl V4116)) ())) ((and (cons? V4116) (and (= cons (hd V4116)) (and (cons? (tl V4116)) (and (cons? (tl (tl V4116))) (= () (tl (tl (tl V4116)))))))) (cons (hd (tl V4116)) (shen.decons (hd (tl (tl V4116)))))) (true V4116)))

(defun shen.insert-runon (V4131 V4132 V4133) (cond ((and (cons? V4133) (and (= shen.pair (hd V4133)) (and (cons? (tl V4133)) (and (cons? (tl (tl V4133))) (and (= () (tl (tl (tl V4133)))) (= (hd (tl (tl V4133))) V4132)))))) V4131) ((cons? V4133) (map (lambda Z (shen.insert-runon V4131 V4132 Z)) V4133)) (true V4133)))

(defun shen.strip-pathname (V4139) (cond ((not (element? "." V4139)) V4139) ((cons? V4139) (shen.strip-pathname (tl V4139))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4143 V4144 V4145) (cond ((cons? V4143) (let Test (cons (hd V4143) (cons V4144 ())) (let Action (shen.syntax (tl V4143) (concat Parse_ (hd V4143)) V4145) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4143)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4143)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4149 V4150 V4151) (cond ((cons? V4149) (let Test (cons cons? (cons (cons hd (cons V4150 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4149)) (cons (cons hd (cons (cons hd (cons V4150 ())) ())) (cons (shen.syntax (tl V4149) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4150 ())) ())) (cons (cons shen.hdtl (cons V4150 ())) ()))) V4151) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4161) (cond ((cons? V4161) false) ((variable? V4161) false) (true true)))

(defun shen.jump_stream? (V4167) (cond ((= V4167 _) true) (true false)))

(defun shen.check_stream (V4171 V4172 V4173) (cond ((cons? V4171) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4172 ())) ())) (cons (cons = (cons (hd V4171) (cons (cons hd (cons (cons hd (cons V4172 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4171) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4172 ())) ())) (cons (cons shen.hdtl (cons V4172 ())) ()))) V4173) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4177 V4178 V4179) (cond ((cons? V4177) (let Test (cons cons? (cons (cons hd (cons V4178 ())) ())) (let Action (shen.syntax (tl V4177) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4178 ())) ())) (cons (cons shen.hdtl (cons V4178 ())) ()))) V4179) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4181) (cond ((= () V4181) ()) ((shen.grammar_symbol? V4181) (cons shen.hdtl (cons (concat Parse_ V4181) ()))) ((variable? V4181) (concat Parse_ V4181)) ((cons? V4181) (map (lambda Z (shen.semantics Z)) V4181)) (true V4181)))

(defun shen.snd-or-fail (V4189) (cond ((and (cons? V4189) (and (cons? (tl V4189)) (= () (tl (tl V4189))))) (hd (tl V4189))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4192 V4193) (cons V4192 (cons V4193 ())))

(defun shen.hdtl (V4195) (hd (tl V4195)))

(defun <!> (V4203) (cond ((and (cons? V4203) (and (cons? (tl V4203)) (= () (tl (tl V4203))))) (cons () (cons (hd V4203) ()))) (true (fail))))

(defun <e> (V4209) (cond ((and (cons? V4209) (and (cons? (tl V4209)) (= () (tl (tl V4209))))) (cons (hd V4209) (cons () ()))) (true (shen.f_error <e>))))



