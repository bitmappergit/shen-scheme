"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V18747) (cond ((and (cons? V18747) (and (= defcc (hd V18747)) (cons? (tl V18747)))) (shen.yacc->shen (hd (tl V18747)) (tl (tl V18747)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V18750 V18751) (let CCRules (shen.split_cc_rules true V18751 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V18750 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V18753) (cond ((> (occurrences kill V18753) 0) (cons trap-error (cons V18753 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V18753)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V18755) (let String (error-to-string V18755) (if (= String "yacc kill") (fail) V18755)))

(defun shen.split_cc_rules (V18761 V18762 V18763) (cond ((and (= () V18762) (= () V18763)) ()) ((= () V18762) (cons (shen.split_cc_rule V18761 (reverse V18763) ()) ())) ((and (cons? V18762) (= ; (hd V18762))) (cons (shen.split_cc_rule V18761 (reverse V18763) ()) (shen.split_cc_rules V18761 (tl V18762) ()))) ((cons? V18762) (shen.split_cc_rules V18761 (tl V18762) (cons (hd V18762) V18763))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V18771 V18772 V18773) (cond ((and (cons? V18772) (and (= := (hd V18772)) (and (cons? (tl V18772)) (= () (tl (tl V18772)))))) (cons (reverse V18773) (tl V18772))) ((and (cons? V18772) (and (= := (hd V18772)) (and (cons? (tl V18772)) (and (cons? (tl (tl V18772))) (and (= where (hd (tl (tl V18772)))) (and (cons? (tl (tl (tl V18772)))) (= () (tl (tl (tl (tl V18772))))))))))) (cons (reverse V18773) (cons (cons where (cons (hd (tl (tl (tl V18772)))) (cons (hd (tl V18772)) ()))) ()))) ((= () V18772) (do (shen.semantic-completion-warning V18771 V18773) (shen.split_cc_rule V18771 (cons := (cons (shen.default_semantics (reverse V18773)) ())) V18773))) ((cons? V18772) (shen.split_cc_rule V18771 (tl V18772) (cons (hd V18772) V18773))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V18784 V18785) (cond ((= true V18784) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V18785)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V18787) (cond ((= () V18787) ()) ((and (cons? V18787) (and (= () (tl V18787)) (shen.grammar_symbol? (hd V18787)))) (hd V18787)) ((and (cons? V18787) (shen.grammar_symbol? (hd V18787))) (cons append (cons (hd V18787) (cons (shen.default_semantics (tl V18787)) ())))) ((cons? V18787) (cons cons (cons (hd V18787) (cons (shen.default_semantics (tl V18787)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V18789) (and (symbol? V18789) (let Cs (shen.strip-pathname (explode V18789)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V18791) (cond ((and (cons? V18791) (= () (tl V18791))) (hd V18791)) ((cons? V18791) (let P YaccParse (cons let (cons P (cons (hd V18791) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V18791)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V18793) (cond ((and (cons? V18793) (and (cons? (tl V18793)) (= () (tl (tl V18793))))) (shen.syntax (hd V18793) Stream (hd (tl V18793)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V18797 V18798 V18799) (cond ((and (= () V18797) (and (cons? V18799) (and (= where (hd V18799)) (and (cons? (tl V18799)) (and (cons? (tl (tl V18799))) (= () (tl (tl (tl V18799))))))))) (cons if (cons (shen.semantics (hd (tl V18799))) (cons (cons shen.pair (cons (cons hd (cons V18798 ())) (cons (shen.semantics (hd (tl (tl V18799)))) ()))) (cons (cons fail ()) ()))))) ((= () V18797) (cons shen.pair (cons (cons hd (cons V18798 ())) (cons (shen.semantics V18799) ())))) ((cons? V18797) (if (shen.grammar_symbol? (hd V18797)) (shen.recursive_descent V18797 V18798 V18799) (if (variable? (hd V18797)) (shen.variable-match V18797 V18798 V18799) (if (shen.jump_stream? (hd V18797)) (shen.jump_stream V18797 V18798 V18799) (if (shen.terminal? (hd V18797)) (shen.check_stream V18797 V18798 V18799) (if (cons? (hd V18797)) (shen.list-stream (shen.decons (hd V18797)) (tl V18797) V18798 V18799) (simple-error (shen.app (hd V18797) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V18804 V18805 V18806 V18807) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V18806 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V18806 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V18805 (cons shen.pair (cons (cons tl (cons (cons hd (cons V18806 ())) ())) (cons (cons hd (cons (cons tl (cons V18806 ())) ())) ()))) V18807) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V18804 (cons shen.pair (cons (cons hd (cons (cons hd (cons V18806 ())) ())) (cons (cons hd (cons (cons tl (cons V18806 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V18809) (cond ((and (cons? V18809) (and (= cons (hd V18809)) (and (cons? (tl V18809)) (and (cons? (tl (tl V18809))) (and (= () (hd (tl (tl V18809)))) (= () (tl (tl (tl V18809))))))))) (cons (hd (tl V18809)) ())) ((and (cons? V18809) (and (= cons (hd V18809)) (and (cons? (tl V18809)) (and (cons? (tl (tl V18809))) (= () (tl (tl (tl V18809)))))))) (cons (hd (tl V18809)) (shen.decons (hd (tl (tl V18809)))))) (true V18809)))

(defun shen.insert-runon (V18824 V18825 V18826) (cond ((and (cons? V18826) (and (= shen.pair (hd V18826)) (and (cons? (tl V18826)) (and (cons? (tl (tl V18826))) (and (= () (tl (tl (tl V18826)))) (= (hd (tl (tl V18826))) V18825)))))) V18824) ((cons? V18826) (map (lambda Z (shen.insert-runon V18824 V18825 Z)) V18826)) (true V18826)))

(defun shen.strip-pathname (V18832) (cond ((not (element? "." V18832)) V18832) ((cons? V18832) (shen.strip-pathname (tl V18832))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V18836 V18837 V18838) (cond ((cons? V18836) (let Test (cons (hd V18836) (cons V18837 ())) (let Action (shen.syntax (tl V18836) (concat Parse_ (hd V18836)) V18838) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V18836)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V18836)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V18842 V18843 V18844) (cond ((cons? V18842) (let Test (cons cons? (cons (cons hd (cons V18843 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V18842)) (cons (cons hd (cons (cons hd (cons V18843 ())) ())) (cons (shen.syntax (tl V18842) (cons shen.pair (cons (cons tl (cons (cons hd (cons V18843 ())) ())) (cons (cons shen.hdtl (cons V18843 ())) ()))) V18844) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V18854) (cond ((cons? V18854) false) ((variable? V18854) false) (true true)))

(defun shen.jump_stream? (V18860) (cond ((= V18860 _) true) (true false)))

(defun shen.check_stream (V18864 V18865 V18866) (cond ((cons? V18864) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V18865 ())) ())) (cons (cons = (cons (hd V18864) (cons (cons hd (cons (cons hd (cons V18865 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V18864) (cons shen.pair (cons (cons tl (cons (cons hd (cons V18865 ())) ())) (cons (cons shen.hdtl (cons V18865 ())) ()))) V18866) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V18870 V18871 V18872) (cond ((cons? V18870) (let Test (cons cons? (cons (cons hd (cons V18871 ())) ())) (let Action (shen.syntax (tl V18870) (cons shen.pair (cons (cons tl (cons (cons hd (cons V18871 ())) ())) (cons (cons shen.hdtl (cons V18871 ())) ()))) V18872) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V18874) (cond ((= () V18874) ()) ((shen.grammar_symbol? V18874) (cons shen.hdtl (cons (concat Parse_ V18874) ()))) ((variable? V18874) (concat Parse_ V18874)) ((cons? V18874) (map (lambda Z (shen.semantics Z)) V18874)) (true V18874)))

(defun shen.snd-or-fail (V18882) (cond ((and (cons? V18882) (and (cons? (tl V18882)) (= () (tl (tl V18882))))) (hd (tl V18882))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V18885 V18886) (cons V18885 (cons V18886 ())))

(defun shen.hdtl (V18888) (hd (tl V18888)))

(defun shen.<!> (V18896) (cond ((and (cons? V18896) (and (cons? (tl V18896)) (= () (tl (tl V18896))))) (cons () (cons (hd V18896) ()))) (true (fail))))

(defun <e> (V18902) (cond ((and (cons? V18902) (and (cons? (tl V18902)) (= () (tl (tl V18902))))) (cons (hd V18902) (cons () ()))) (true (shen.f_error <e>))))



