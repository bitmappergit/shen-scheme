"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V2416) (cond ((and (cons? V2416) (and (= defcc (hd V2416)) (cons? (tl V2416)))) (shen.yacc->shen (hd (tl V2416)) (tl (tl V2416)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V2417 V2418) (let CCRules (shen.split_cc_rules true V2418 ()) (let CCBody (map shen.cc_body CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2417 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2419) (cond ((> (occurrences kill V2419) 0) (cons trap-error (cons V2419 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2419)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2420) (let String (error-to-string V2420) (if (= String "yacc kill") (fail) V2420)))

(defun shen.split_cc_rules (V2423 V2424 V2425) (cond ((and (= () V2424) (= () V2425)) ()) ((= () V2424) (cons (shen.split_cc_rule V2423 (reverse V2425) ()) ())) ((and (cons? V2424) (= ; (hd V2424))) (cons (shen.split_cc_rule V2423 (reverse V2425) ()) (shen.split_cc_rules V2423 (tl V2424) ()))) ((cons? V2424) (shen.split_cc_rules V2423 (tl V2424) (cons (hd V2424) V2425))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2430 V2431 V2432) (cond ((and (cons? V2431) (and (= := (hd V2431)) (and (cons? (tl V2431)) (= () (tl (tl V2431)))))) (cons (reverse V2432) (tl V2431))) ((and (cons? V2431) (and (= := (hd V2431)) (and (cons? (tl V2431)) (and (cons? (tl (tl V2431))) (and (= where (hd (tl (tl V2431)))) (and (cons? (tl (tl (tl V2431)))) (= () (tl (tl (tl (tl V2431))))))))))) (cons (reverse V2432) (cons (cons where (cons (hd (tl (tl (tl V2431)))) (cons (hd (tl V2431)) ()))) ()))) ((= () V2431) (do (shen.semantic-completion-warning V2430 V2432) (shen.split_cc_rule V2430 (cons := (cons (shen.default_semantics (reverse V2432)) ())) V2432))) ((cons? V2431) (shen.split_cc_rule V2430 (tl V2431) (cons (hd V2431) V2432))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V2441 V2442) (cond ((= true V2441) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V2442)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V2443) (cond ((= () V2443) ()) ((and (cons? V2443) (and (= () (tl V2443)) (shen.grammar_symbol? (hd V2443)))) (hd V2443)) ((and (cons? V2443) (shen.grammar_symbol? (hd V2443))) (cons append (cons (hd V2443) (cons (shen.default_semantics (tl V2443)) ())))) ((cons? V2443) (cons cons (cons (hd V2443) (cons (shen.default_semantics (tl V2443)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V2444) (and (symbol? V2444) (let Cs (shen.strip-pathname (explode V2444)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V2445) (cond ((and (cons? V2445) (= () (tl V2445))) (hd V2445)) ((cons? V2445) (let P YaccParse (cons let (cons P (cons (hd V2445) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V2445)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V2446) (cond ((and (cons? V2446) (and (cons? (tl V2446)) (= () (tl (tl V2446))))) (shen.syntax (hd V2446) Stream (hd (tl V2446)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V2447 V2448 V2449) (cond ((and (= () V2447) (and (cons? V2449) (and (= where (hd V2449)) (and (cons? (tl V2449)) (and (cons? (tl (tl V2449))) (= () (tl (tl (tl V2449))))))))) (cons if (cons (shen.semantics (hd (tl V2449))) (cons (cons shen.pair (cons (cons hd (cons V2448 ())) (cons (shen.semantics (hd (tl (tl V2449)))) ()))) (cons (cons fail ()) ()))))) ((= () V2447) (cons shen.pair (cons (cons hd (cons V2448 ())) (cons (shen.semantics V2449) ())))) ((cons? V2447) (if (shen.grammar_symbol? (hd V2447)) (shen.recursive_descent V2447 V2448 V2449) (if (variable? (hd V2447)) (shen.variable-match V2447 V2448 V2449) (if (shen.jump_stream? (hd V2447)) (shen.jump_stream V2447 V2448 V2449) (if (shen.terminal? (hd V2447)) (shen.check_stream V2447 V2448 V2449) (if (cons? (hd V2447)) (shen.list-stream (shen.decons (hd V2447)) (tl V2447) V2448 V2449) (simple-error (shen.app (hd V2447) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V2450 V2451 V2452 V2453) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2452 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2452 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V2451 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2452 ())) ())) (cons (cons hd (cons (cons tl (cons V2452 ())) ())) ()))) V2453) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V2450 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2452 ())) ())) (cons (cons hd (cons (cons tl (cons V2452 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V2454) (cond ((and (cons? V2454) (and (= cons (hd V2454)) (and (cons? (tl V2454)) (and (cons? (tl (tl V2454))) (and (= () (hd (tl (tl V2454)))) (= () (tl (tl (tl V2454))))))))) (cons (hd (tl V2454)) ())) ((and (cons? V2454) (and (= cons (hd V2454)) (and (cons? (tl V2454)) (and (cons? (tl (tl V2454))) (= () (tl (tl (tl V2454)))))))) (cons (hd (tl V2454)) (shen.decons (hd (tl (tl V2454)))))) (true V2454)))

(defun shen.insert-runon (V2466 V2467 V2468) (cond ((and (cons? V2468) (and (= shen.pair (hd V2468)) (and (cons? (tl V2468)) (and (cons? (tl (tl V2468))) (and (= () (tl (tl (tl V2468)))) (= (hd (tl (tl V2468))) V2467)))))) V2466) ((cons? V2468) (map (lambda Z (shen.insert-runon V2466 V2467 Z)) V2468)) (true V2468)))

(defun shen.strip-pathname (V2473) (cond ((not (element? "." V2473)) V2473) ((cons? V2473) (shen.strip-pathname (tl V2473))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V2474 V2475 V2476) (cond ((cons? V2474) (let Test (cons (hd V2474) (cons V2475 ())) (let Action (shen.syntax (tl V2474) (concat Parse_ (hd V2474)) V2476) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2474)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2474)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V2477 V2478 V2479) (cond ((cons? V2477) (let Test (cons cons? (cons (cons hd (cons V2478 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2477)) (cons (cons hd (cons (cons hd (cons V2478 ())) ())) (cons (shen.syntax (tl V2477) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2478 ())) ())) (cons (cons shen.hdtl (cons V2478 ())) ()))) V2479) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V2488) (cond ((cons? V2488) false) ((variable? V2488) false) (true true)))

(defun shen.jump_stream? (V2493) (cond ((= V2493 _) true) (true false)))

(defun shen.check_stream (V2494 V2495 V2496) (cond ((cons? V2494) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2495 ())) ())) (cons (cons = (cons (hd V2494) (cons (cons hd (cons (cons hd (cons V2495 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2494) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2495 ())) ())) (cons (cons shen.hdtl (cons V2495 ())) ()))) V2496) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V2497 V2498 V2499) (cond ((cons? V2497) (let Test (cons cons? (cons (cons hd (cons V2498 ())) ())) (let Action (shen.syntax (tl V2497) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2498 ())) ())) (cons (cons shen.hdtl (cons V2498 ())) ()))) V2499) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V2500) (cond ((= () V2500) ()) ((shen.grammar_symbol? V2500) (cons shen.hdtl (cons (concat Parse_ V2500) ()))) ((variable? V2500) (concat Parse_ V2500)) ((cons? V2500) (map shen.semantics V2500)) (true V2500)))

(defun shen.snd-or-fail (V2507) (cond ((and (cons? V2507) (and (cons? (tl V2507)) (= () (tl (tl V2507))))) (hd (tl V2507))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V2508 V2509) (cons V2508 (cons V2509 ())))

(defun shen.hdtl (V2510) (hd (tl V2510)))

(defun shen.<!> (V2517) (cond ((and (cons? V2517) (and (cons? (tl V2517)) (= () (tl (tl V2517))))) (cons () (cons (hd V2517) ()))) (true (fail))))

(defun <e> (V2522) (cond ((and (cons? V2522) (and (cons? (tl V2522)) (= () (tl (tl V2522))))) (cons (hd V2522) (cons () ()))) (true (shen.f_error <e>))))



