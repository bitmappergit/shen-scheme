"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun shen.yacc (V2185) (cond ((and (cons? V2185) (and (= defcc (hd V2185)) (and (cons? (tl V2185)) (and (cons? (tl (tl V2185))) (and (= { (hd (tl (tl V2185)))) (and (cons? (tl (tl (tl V2185)))) (and (cons? (tl (tl (tl (tl V2185))))) (and (= ==> (hd (tl (tl (tl (tl V2185)))))) (and (cons? (tl (tl (tl (tl (tl V2185)))))) (and (cons? (tl (tl (tl (tl (tl (tl V2185))))))) (= } (hd (tl (tl (tl (tl (tl (tl V2185)))))))))))))))))) (shen.yacc (cons defcc (cons (hd (tl V2185)) (tl (tl (tl (tl (tl (tl (tl V2185))))))))))) ((and (cons? V2185) (and (= defcc (hd V2185)) (cons? (tl V2185)))) (shen.yacc->shen (hd (tl V2185)) (tl (tl V2185)))) (true (shen.sys-error shen.yacc))))

(defun shen.yacc->shen (V2186 V2187) (let CCRules (shen.split_cc_rules true V2187 ()) (let CCBody (map (lambda X2183 (shen.cc_body X2183)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2186 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2188) (cond ((> (occurrences kill V2188) 0) (cons trap-error (cons V2188 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2188)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2189) (let String (error-to-string V2189) (if (= String "yacc kill") (fail) V2189)))

(defun shen.split_cc_rules (V2192 V2193 V2194) (cond ((and (= () V2193) (= () V2194)) ()) ((= () V2193) (cons (shen.split_cc_rule V2192 (reverse V2194) ()) ())) ((and (cons? V2193) (= ; (hd V2193))) (cons (shen.split_cc_rule V2192 (reverse V2194) ()) (shen.split_cc_rules V2192 (tl V2193) ()))) ((cons? V2193) (shen.split_cc_rules V2192 (tl V2193) (cons (hd V2193) V2194))) (true (shen.sys-error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2199 V2200 V2201) (cond ((and (cons? V2200) (and (= := (hd V2200)) (and (cons? (tl V2200)) (= () (tl (tl V2200)))))) (cons (reverse V2201) (tl V2200))) ((and (cons? V2200) (and (= := (hd V2200)) (and (cons? (tl V2200)) (and (cons? (tl (tl V2200))) (and (= where (hd (tl (tl V2200)))) (and (cons? (tl (tl (tl V2200)))) (= () (tl (tl (tl (tl V2200))))))))))) (cons (reverse V2201) (cons (cons where (cons (hd (tl (tl (tl V2200)))) (cons (hd (tl V2200)) ()))) ()))) ((= () V2200) (do (shen.semantic-completion-warning V2199 V2201) (shen.split_cc_rule V2199 (cons := (cons (shen.default_semantics (reverse V2201)) ())) V2201))) ((cons? V2200) (shen.split_cc_rule V2199 (tl V2200) (cons (hd V2200) V2201))) (true (shen.sys-error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V2210 V2211) (cond ((= true V2210) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V2211)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V2212) (cond ((= () V2212) ()) ((and (cons? V2212) (and (= () (tl V2212)) (shen.grammar_symbol? (hd V2212)))) (hd V2212)) ((and (cons? V2212) (shen.grammar_symbol? (hd V2212))) (cons append (cons (hd V2212) (cons (shen.default_semantics (tl V2212)) ())))) ((cons? V2212) (cons cons (cons (hd V2212) (cons (shen.default_semantics (tl V2212)) ())))) (true (shen.sys-error shen.default_semantics))))

(defun shen.grammar_symbol? (V2213) (and (symbol? V2213) (let Cs (shen.strip-pathname (explode V2213)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V2214) (cond ((and (cons? V2214) (= () (tl V2214))) (hd V2214)) ((cons? V2214) (let P YaccParse (cons let (cons P (cons (hd V2214) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V2214)) (cons P ())))) ())))))) (true (shen.sys-error shen.yacc_cases))))

(defun shen.cc_body (V2215) (cond ((and (cons? V2215) (and (cons? (tl V2215)) (= () (tl (tl V2215))))) (shen.syntax (hd V2215) Stream (hd (tl V2215)))) (true (shen.sys-error shen.cc_body))))

(defun shen.syntax (V2216 V2217 V2218) (cond ((and (= () V2216) (and (cons? V2218) (and (= where (hd V2218)) (and (cons? (tl V2218)) (and (cons? (tl (tl V2218))) (= () (tl (tl (tl V2218))))))))) (cons if (cons (shen.semantics (hd (tl V2218))) (cons (cons shen.pair (cons (cons hd (cons V2217 ())) (cons (shen.semantics (hd (tl (tl V2218)))) ()))) (cons (cons fail ()) ()))))) ((= () V2216) (cons shen.pair (cons (cons hd (cons V2217 ())) (cons (shen.semantics V2218) ())))) ((cons? V2216) (if (shen.grammar_symbol? (hd V2216)) (shen.recursive_descent V2216 V2217 V2218) (if (variable? (hd V2216)) (shen.variable-match V2216 V2217 V2218) (if (shen.jump_stream? (hd V2216)) (shen.jump_stream V2216 V2217 V2218) (if (shen.terminal? (hd V2216)) (shen.check_stream V2216 V2217 V2218) (if (cons? (hd V2216)) (shen.list-stream (shen.decons (hd V2216)) (tl V2216) V2217 V2218) (simple-error (shen.app (hd V2216) " is not legal syntax
" shen.a)))))))) (true (shen.sys-error shen.syntax))))

(defun shen.list-stream (V2219 V2220 V2221 V2222) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2221 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2221 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V2220 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2221 ())) ())) (cons (cons hd (cons (cons tl (cons V2221 ())) ())) ()))) V2222) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V2219 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2221 ())) ())) (cons (cons hd (cons (cons tl (cons V2221 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V2223) (cond ((and (cons? V2223) (and (= cons (hd V2223)) (and (cons? (tl V2223)) (and (cons? (tl (tl V2223))) (and (= () (hd (tl (tl V2223)))) (= () (tl (tl (tl V2223))))))))) (cons (hd (tl V2223)) ())) ((and (cons? V2223) (and (= cons (hd V2223)) (and (cons? (tl V2223)) (and (cons? (tl (tl V2223))) (= () (tl (tl (tl V2223)))))))) (cons (hd (tl V2223)) (shen.decons (hd (tl (tl V2223)))))) (true V2223)))

(defun shen.insert-runon (V2234 V2235 V2236) (cond ((and (cons? V2236) (and (= shen.pair (hd V2236)) (and (cons? (tl V2236)) (and (cons? (tl (tl V2236))) (and (= () (tl (tl (tl V2236)))) (= (hd (tl (tl V2236))) V2235)))))) V2234) ((cons? V2236) (map (lambda Z (shen.insert-runon V2234 V2235 Z)) V2236)) (true V2236)))

(defun shen.strip-pathname (V2242) (cond ((not (element? "." V2242)) V2242) ((cons? V2242) (shen.strip-pathname (tl V2242))) (true (shen.sys-error shen.strip-pathname))))

(defun shen.recursive_descent (V2243 V2244 V2245) (cond ((cons? V2243) (let Test (cons (hd V2243) (cons V2244 ())) (let Action (shen.syntax (tl V2243) (concat Parse_ (hd V2243)) V2245) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2243)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2243)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.sys-error shen.recursive_descent))))

(defun shen.variable-match (V2246 V2247 V2248) (cond ((cons? V2246) (let Test (cons cons? (cons (cons hd (cons V2247 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2246)) (cons (cons hd (cons (cons hd (cons V2247 ())) ())) (cons (shen.syntax (tl V2246) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2247 ())) ())) (cons (cons shen.hdtl (cons V2247 ())) ()))) V2248) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.sys-error shen.variable-match))))

(defun shen.terminal? (V2257) (cond ((cons? V2257) false) ((variable? V2257) false) (true true)))

(defun shen.jump_stream? (V2262) (cond ((= V2262 _) true) (true false)))

(defun shen.check_stream (V2263 V2264 V2265) (cond ((cons? V2263) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2264 ())) ())) (cons (cons = (cons (hd V2263) (cons (cons hd (cons (cons hd (cons V2264 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2263) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2264 ())) ())) (cons (cons shen.hdtl (cons V2264 ())) ()))) V2265) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.sys-error shen.check_stream))))

(defun shen.jump_stream (V2266 V2267 V2268) (cond ((cons? V2266) (let Test (cons cons? (cons (cons hd (cons V2267 ())) ())) (let Action (shen.syntax (tl V2266) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2267 ())) ())) (cons (cons shen.hdtl (cons V2267 ())) ()))) V2268) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.sys-error shen.jump_stream))))

(defun shen.semantics (V2269) (cond ((= () V2269) ()) ((shen.grammar_symbol? V2269) (cons shen.hdtl (cons (concat Parse_ V2269) ()))) ((variable? V2269) (concat Parse_ V2269)) ((cons? V2269) (map (lambda X2184 (shen.semantics X2184)) V2269)) (true V2269)))

(defun shen.snd-or-fail (V2276) (cond ((and (cons? V2276) (and (cons? (tl V2276)) (= () (tl (tl V2276))))) (hd (tl V2276))) (true (fail))))

(defun fail () shen.fail!)

(defun shen.pair (V2277 V2278) (cons V2277 (cons V2278 ())))

(defun shen.hdtl (V2279) (hd (tl V2279)))

(defun <!> (V2286) (cond ((and (cons? V2286) (and (cons? (tl V2286)) (= () (tl (tl V2286))))) (cons () (cons (hd V2286) ()))) (true (fail))))

(defun <e> (V2291) (cond ((and (cons? V2291) (and (cons? (tl V2291)) (= () (tl (tl V2291))))) (cons (hd V2291) (cons () ()))) (true (shen.sys-error <e>))))



