"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V2460) (cond ((and (cons? V2460) (and (= defcc (hd V2460)) (cons? (tl V2460)))) (shen.yacc->shen (hd (tl V2460)) (tl (tl V2460)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V2461 V2462) (let CCRules (shen.split_cc_rules true V2462 ()) (let CCBody (map (lambda V2458 (shen.cc_body V2458)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2461 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2463) (cond ((> (occurrences kill V2463) 0) (cons trap-error (cons V2463 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2463)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2464) (let String (error-to-string V2464) (if (= String "yacc kill") (fail) V2464)))

(defun shen.split_cc_rules (V2467 V2468 V2469) (cond ((and (= () V2468) (= () V2469)) ()) ((= () V2468) (cons (shen.split_cc_rule V2467 (reverse V2469) ()) ())) ((and (cons? V2468) (= ; (hd V2468))) (cons (shen.split_cc_rule V2467 (reverse V2469) ()) (shen.split_cc_rules V2467 (tl V2468) ()))) ((cons? V2468) (shen.split_cc_rules V2467 (tl V2468) (cons (hd V2468) V2469))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2474 V2475 V2476) (cond ((and (cons? V2475) (and (= := (hd V2475)) (and (cons? (tl V2475)) (= () (tl (tl V2475)))))) (cons (reverse V2476) (tl V2475))) ((and (cons? V2475) (and (= := (hd V2475)) (and (cons? (tl V2475)) (and (cons? (tl (tl V2475))) (and (= where (hd (tl (tl V2475)))) (and (cons? (tl (tl (tl V2475)))) (= () (tl (tl (tl (tl V2475))))))))))) (cons (reverse V2476) (cons (cons where (cons (hd (tl (tl (tl V2475)))) (cons (hd (tl V2475)) ()))) ()))) ((= () V2475) (do (shen.semantic-completion-warning V2474 V2476) (shen.split_cc_rule V2474 (cons := (cons (shen.default_semantics (reverse V2476)) ())) V2476))) ((cons? V2475) (shen.split_cc_rule V2474 (tl V2475) (cons (hd V2475) V2476))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V2485 V2486) (cond ((= true V2485) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V2486)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V2487) (cond ((= () V2487) ()) ((and (cons? V2487) (and (= () (tl V2487)) (shen.grammar_symbol? (hd V2487)))) (hd V2487)) ((and (cons? V2487) (shen.grammar_symbol? (hd V2487))) (cons append (cons (hd V2487) (cons (shen.default_semantics (tl V2487)) ())))) ((cons? V2487) (cons cons (cons (hd V2487) (cons (shen.default_semantics (tl V2487)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V2488) (and (symbol? V2488) (let Cs (shen.strip-pathname (explode V2488)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V2489) (cond ((and (cons? V2489) (= () (tl V2489))) (hd V2489)) ((cons? V2489) (let P YaccParse (cons let (cons P (cons (hd V2489) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V2489)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V2490) (cond ((and (cons? V2490) (and (cons? (tl V2490)) (= () (tl (tl V2490))))) (shen.syntax (hd V2490) Stream (hd (tl V2490)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V2491 V2492 V2493) (cond ((and (= () V2491) (and (cons? V2493) (and (= where (hd V2493)) (and (cons? (tl V2493)) (and (cons? (tl (tl V2493))) (= () (tl (tl (tl V2493))))))))) (cons if (cons (shen.semantics (hd (tl V2493))) (cons (cons shen.pair (cons (cons hd (cons V2492 ())) (cons (shen.semantics (hd (tl (tl V2493)))) ()))) (cons (cons fail ()) ()))))) ((= () V2491) (cons shen.pair (cons (cons hd (cons V2492 ())) (cons (shen.semantics V2493) ())))) ((cons? V2491) (if (shen.grammar_symbol? (hd V2491)) (shen.recursive_descent V2491 V2492 V2493) (if (variable? (hd V2491)) (shen.variable-match V2491 V2492 V2493) (if (shen.jump_stream? (hd V2491)) (shen.jump_stream V2491 V2492 V2493) (if (shen.terminal? (hd V2491)) (shen.check_stream V2491 V2492 V2493) (if (cons? (hd V2491)) (shen.list-stream (shen.decons (hd V2491)) (tl V2491) V2492 V2493) (simple-error (shen.app (hd V2491) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V2494 V2495 V2496 V2497) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2496 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2496 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V2495 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2496 ())) ())) (cons (cons hd (cons (cons tl (cons V2496 ())) ())) ()))) V2497) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V2494 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2496 ())) ())) (cons (cons hd (cons (cons tl (cons V2496 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V2498) (cond ((and (cons? V2498) (and (= cons (hd V2498)) (and (cons? (tl V2498)) (and (cons? (tl (tl V2498))) (and (= () (hd (tl (tl V2498)))) (= () (tl (tl (tl V2498))))))))) (cons (hd (tl V2498)) ())) ((and (cons? V2498) (and (= cons (hd V2498)) (and (cons? (tl V2498)) (and (cons? (tl (tl V2498))) (= () (tl (tl (tl V2498)))))))) (cons (hd (tl V2498)) (shen.decons (hd (tl (tl V2498)))))) (true V2498)))

(defun shen.insert-runon (V2510 V2511 V2512) (cond ((and (cons? V2512) (and (= shen.pair (hd V2512)) (and (cons? (tl V2512)) (and (cons? (tl (tl V2512))) (and (= () (tl (tl (tl V2512)))) (= (hd (tl (tl V2512))) V2511)))))) V2510) ((cons? V2512) (map (lambda Z (shen.insert-runon V2510 V2511 Z)) V2512)) (true V2512)))

(defun shen.strip-pathname (V2517) (cond ((not (element? "." V2517)) V2517) ((cons? V2517) (shen.strip-pathname (tl V2517))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V2518 V2519 V2520) (cond ((cons? V2518) (let Test (cons (hd V2518) (cons V2519 ())) (let Action (shen.syntax (tl V2518) (concat Parse_ (hd V2518)) V2520) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2518)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2518)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V2521 V2522 V2523) (cond ((cons? V2521) (let Test (cons cons? (cons (cons hd (cons V2522 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2521)) (cons (cons hd (cons (cons hd (cons V2522 ())) ())) (cons (shen.syntax (tl V2521) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2522 ())) ())) (cons (cons shen.hdtl (cons V2522 ())) ()))) V2523) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V2532) (cond ((cons? V2532) false) ((variable? V2532) false) (true true)))

(defun shen.jump_stream? (V2537) (cond ((= V2537 _) true) (true false)))

(defun shen.check_stream (V2538 V2539 V2540) (cond ((cons? V2538) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2539 ())) ())) (cons (cons = (cons (hd V2538) (cons (cons hd (cons (cons hd (cons V2539 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2538) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2539 ())) ())) (cons (cons shen.hdtl (cons V2539 ())) ()))) V2540) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V2541 V2542 V2543) (cond ((cons? V2541) (let Test (cons cons? (cons (cons hd (cons V2542 ())) ())) (let Action (shen.syntax (tl V2541) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2542 ())) ())) (cons (cons shen.hdtl (cons V2542 ())) ()))) V2543) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V2544) (cond ((= () V2544) ()) ((shen.grammar_symbol? V2544) (cons shen.hdtl (cons (concat Parse_ V2544) ()))) ((variable? V2544) (concat Parse_ V2544)) ((cons? V2544) (map (lambda V2459 (shen.semantics V2459)) V2544)) (true V2544)))

(defun shen.snd-or-fail (V2551) (cond ((and (cons? V2551) (and (cons? (tl V2551)) (= () (tl (tl V2551))))) (hd (tl V2551))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V2552 V2553) (cons V2552 (cons V2553 ())))

(defun shen.hdtl (V2554) (hd (tl V2554)))

(defun shen.<!> (V2561) (cond ((and (cons? V2561) (and (cons? (tl V2561)) (= () (tl (tl V2561))))) (cons () (cons (hd V2561) ()))) (true (fail))))

(defun <e> (V2566) (cond ((and (cons? V2566) (and (cons? (tl V2566)) (= () (tl (tl V2566))))) (cons (hd V2566) (cons () ()))) (true (shen.f_error <e>))))



