"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun load (V727) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V727)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))

(defun shen.load-help (V732 V733) (cond ((= false V732) (map (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V733)) (true (let RemoveSynonyms (mapcan (lambda V722 (shen.remove-synonyms V722)) V733) (let Table (mapcan (lambda V723 (shen.typetable V723)) RemoveSynonyms) (let Assume (map (lambda V724 (shen.assumetype V724)) Table) (trap-error (map (lambda V725 (shen.typecheck-and-load V725)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))

(defun shen.remove-synonyms (V734) (cond ((and (cons? V734) (= shen.synonyms-help (hd V734))) (do (eval V734) ())) (true (cons V734 ()))))

(defun shen.typecheck-and-load (V735) (do (nl 1) (shen.typecheck-and-evaluate V735 (gensym A))))

(defun shen.typetable (V740) (cond ((and (cons? V740) (and (= define (hd V740)) (cons? (tl V740)))) (let Sig (compile (lambda V726 (shen.<sig+rest> V726)) (tl (tl V740)) (lambda E (simple-error (shen.app (hd (tl V740)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V740)) Sig) ()))) (true ())))

(defun shen.assumetype (V741) (cond ((cons? V741) (declare (hd V741) (tl V741))) (true (shen.f_error shen.assumetype))))

(defun shen.unwind-types (V746 V747) (cond ((= () V747) (simple-error (error-to-string V746))) ((and (cons? V747) (cons? (hd V747))) (do (shen.remtype (hd (hd V747))) (shen.unwind-types V746 (tl V747)))) (true (shen.f_error shen.unwind-types))))

(defun shen.remtype (V748) (set shen.*signedfuncs* (shen.removetype V748 (value shen.*signedfuncs*))))

(defun shen.removetype (V754 V755) (cond ((= () V755) ()) ((and (cons? V755) (and (cons? (hd V755)) (= (hd (hd V755)) V754))) (shen.removetype (hd (hd V755)) (tl V755))) ((cons? V755) (cons (hd V755) (shen.removetype V754 (tl V755)))) (true (shen.f_error shen.removetype))))

(defun shen.<sig+rest> (V756) (let Parse_shen.<signature> (shen.<signature> V756) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<!> (shen.<!> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<!>)) (shen.pair (hd Parse_shen.<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))

(defun write-to-file (V757 V758) (let Stream (open V757 out) (let String (if (string? V758) (shen.app V758 "

" shen.a) (shen.app V758 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V758)))))



