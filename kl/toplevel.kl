"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V2197) (cond ((= () V2197) ()) ((and (cons? V2197) (cons? (tl V2197))) (do (set (hd V2197) (hd (tl V2197))) (shen.multiple-set (tl (tl V2197))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V2198) (declare V2198 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V2208 V2209) (cond ((and (tuple? V2208) (and (cons? (snd V2208)) (element? (hd (snd V2208)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V2208) (tl (snd V2208))) V2209)) ((and (tuple? V2208) (and (cons? (snd V2208)) (and (cons? (tl (snd V2208))) (and (= () (tl (tl (snd V2208)))) (and (cons? V2209) (and (= (hd (snd V2208)) (shen.exclamation)) (= (hd (tl (snd V2208))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V2209))) (hd V2209))) ((and (tuple? V2208) (and (cons? (snd V2208)) (= (hd (snd V2208)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V2208)) V2209) (let Find (head (shen.find-past-inputs Key? V2209)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V2208) (and (cons? (snd V2208)) (and (= () (tl (snd V2208))) (= (hd (snd V2208)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V2209) 0) (abort))) ((and (tuple? V2208) (and (cons? (snd V2208)) (= (hd (snd V2208)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V2208)) V2209) (let Pastprint (shen.print-past-inputs Key? (reverse V2209) 0) (abort)))) (true V2208)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V2210) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V2210) (nl 1)))

(defun shen.update_history (V2211 V2212) (set shen.*history* (cons V2211 V2212)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V2214 V2215) (cond ((= V2214 (shen.hat)) (simple-error "line read aborted")) ((element? V2214 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile shen.<st_input> V2215 (lambda E shen.nextline)) (let It (shen.record-it V2215) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V2215 (cons V2214 ()))) (@p Line V2215))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V2215 (cons V2214 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V2220) (cond ((= + V2220) (set shen.*tc* true)) ((= - V2220) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V2221) (shen.toplevel_evaluate V2221 (value shen.*tc*)))

(defun shen.find-past-inputs (V2222 V2223) (let F (shen.find V2222 V2223) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V2224 V2225) (let Atom (hd (compile shen.<st_input> V2224 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V2225)))) (lambda X (shen.prefix? V2224 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V2226) (cond ((and (cons? V2226) (= (hd V2226) (shen.space))) (shen.trim-gubbins (tl V2226))) ((and (cons? V2226) (= (hd V2226) (shen.newline))) (shen.trim-gubbins (tl V2226))) ((and (cons? V2226) (= (hd V2226) (shen.carriage-return))) (shen.trim-gubbins (tl V2226))) ((and (cons? V2226) (= (hd V2226) (shen.tab))) (shen.trim-gubbins (tl V2226))) ((and (cons? V2226) (= (hd V2226) (shen.left-round))) (shen.trim-gubbins (tl V2226))) (true V2226)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V2233 V2234) (cond ((= () V2234) ()) ((and (cons? V2234) (V2233 (hd V2234))) (cons (hd V2234) (shen.find V2233 (tl V2234)))) ((cons? V2234) (shen.find V2233 (tl V2234))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V2246 V2247) (cond ((= () V2246) true) ((and (cons? V2246) (and (cons? V2247) (= (hd V2247) (hd V2246)))) (shen.prefix? (tl V2246) (tl V2247))) (true false)))

(defun shen.print-past-inputs (V2256 V2257 V2258) (cond ((= () V2257) _) ((and (cons? V2257) (not (V2256 (hd V2257)))) (shen.print-past-inputs V2256 (tl V2257) (+ V2258 1))) ((and (cons? V2257) (tuple? (hd V2257))) (do (shen.prhush (shen.app V2258 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V2257))) (shen.print-past-inputs V2256 (tl V2257) (+ V2258 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V2259 V2260) (cond ((and (cons? V2259) (and (cons? (tl V2259)) (and (= : (hd (tl V2259))) (and (cons? (tl (tl V2259))) (and (= () (tl (tl (tl V2259)))) (= true V2260)))))) (shen.typecheck-and-evaluate (hd V2259) (hd (tl (tl V2259))))) ((and (cons? V2259) (cons? (tl V2259))) (do (shen.toplevel_evaluate (cons (hd V2259) ()) V2260) (do (nl 1) (shen.toplevel_evaluate (tl V2259) V2260)))) ((and (cons? V2259) (and (= () (tl V2259)) (= true V2260))) (shen.typecheck-and-evaluate (hd V2259) (gensym A))) ((and (cons? V2259) (and (= () (tl V2259)) (= false V2260))) (let Eval (shen.eval-without-macros (hd V2259)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V2261 V2262) (let Typecheck (shen.typecheck V2261 V2262) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V2261) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V2263) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V2263) V2263))

(defun shen.extract-pvars (V2268) (cond ((shen.pvar? V2268) (cons V2268 ())) ((cons? V2268) (union (shen.extract-pvars (hd V2268)) (shen.extract-pvars (tl V2268)))) (true ())))

(defun shen.mult_subst (V2273 V2274 V2275) (cond ((= () V2273) V2275) ((= () V2274) V2275) ((and (cons? V2273) (cons? V2274)) (shen.mult_subst (tl V2273) (tl V2274) (subst (hd V2273) (hd V2274) V2275))) (true (shen.f_error shen.mult_subst))))



