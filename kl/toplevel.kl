"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V2238) (cond ((= () V2238) ()) ((and (cons? V2238) (cons? (tl V2238))) (do (set (hd V2238) (hd (tl V2238))) (shen.multiple-set (tl (tl V2238))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V2239) (declare V2239 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V2249 V2250) (cond ((and (tuple? V2249) (and (cons? (snd V2249)) (element? (hd (snd V2249)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V2249) (tl (snd V2249))) V2250)) ((and (tuple? V2249) (and (cons? (snd V2249)) (and (cons? (tl (snd V2249))) (and (= () (tl (tl (snd V2249)))) (and (cons? V2250) (and (= (hd (snd V2249)) (shen.exclamation)) (= (hd (tl (snd V2249))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V2250))) (hd V2250))) ((and (tuple? V2249) (and (cons? (snd V2249)) (= (hd (snd V2249)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V2249)) V2250) (let Find (head (shen.find-past-inputs Key? V2250)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V2249) (and (cons? (snd V2249)) (and (= () (tl (snd V2249))) (= (hd (snd V2249)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V2250) 0) (abort))) ((and (tuple? V2249) (and (cons? (snd V2249)) (= (hd (snd V2249)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V2249)) V2250) (let Pastprint (shen.print-past-inputs Key? (reverse V2250) 0) (abort)))) (true V2249)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V2251) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V2251) (nl 1)))

(defun shen.update_history (V2252 V2253) (set shen.*history* (cons V2252 V2253)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V2255 V2256) (cond ((= V2255 (shen.hat)) (simple-error "line read aborted")) ((element? V2255 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda V2236 (shen.<st_input> V2236)) V2256 (lambda E shen.nextline)) (let It (shen.record-it V2256) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V2256 (cons V2255 ()))) (@p Line V2256))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V2256 (cons V2255 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V2261) (cond ((= + V2261) (set shen.*tc* true)) ((= - V2261) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V2262) (shen.toplevel_evaluate V2262 (value shen.*tc*)))

(defun shen.find-past-inputs (V2263 V2264) (let F (shen.find V2263 V2264) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V2265 V2266) (let Atom (hd (compile (lambda V2237 (shen.<st_input> V2237)) V2265 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V2266)))) (lambda X (shen.prefix? V2265 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V2267) (cond ((and (cons? V2267) (= (hd V2267) (shen.space))) (shen.trim-gubbins (tl V2267))) ((and (cons? V2267) (= (hd V2267) (shen.newline))) (shen.trim-gubbins (tl V2267))) ((and (cons? V2267) (= (hd V2267) (shen.carriage-return))) (shen.trim-gubbins (tl V2267))) ((and (cons? V2267) (= (hd V2267) (shen.tab))) (shen.trim-gubbins (tl V2267))) ((and (cons? V2267) (= (hd V2267) (shen.left-round))) (shen.trim-gubbins (tl V2267))) (true V2267)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V2274 V2275) (cond ((= () V2275) ()) ((and (cons? V2275) (V2274 (hd V2275))) (cons (hd V2275) (shen.find V2274 (tl V2275)))) ((cons? V2275) (shen.find V2274 (tl V2275))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V2287 V2288) (cond ((= () V2287) true) ((and (cons? V2287) (and (cons? V2288) (= (hd V2288) (hd V2287)))) (shen.prefix? (tl V2287) (tl V2288))) (true false)))

(defun shen.print-past-inputs (V2297 V2298 V2299) (cond ((= () V2298) _) ((and (cons? V2298) (not (V2297 (hd V2298)))) (shen.print-past-inputs V2297 (tl V2298) (+ V2299 1))) ((and (cons? V2298) (tuple? (hd V2298))) (do (shen.prhush (shen.app V2299 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V2298))) (shen.print-past-inputs V2297 (tl V2298) (+ V2299 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V2300 V2301) (cond ((and (cons? V2300) (and (cons? (tl V2300)) (and (= : (hd (tl V2300))) (and (cons? (tl (tl V2300))) (and (= () (tl (tl (tl V2300)))) (= true V2301)))))) (shen.typecheck-and-evaluate (hd V2300) (hd (tl (tl V2300))))) ((and (cons? V2300) (cons? (tl V2300))) (do (shen.toplevel_evaluate (cons (hd V2300) ()) V2301) (do (nl 1) (shen.toplevel_evaluate (tl V2300) V2301)))) ((and (cons? V2300) (and (= () (tl V2300)) (= true V2301))) (shen.typecheck-and-evaluate (hd V2300) (gensym A))) ((and (cons? V2300) (and (= () (tl V2300)) (= false V2301))) (let Eval (shen.eval-without-macros (hd V2300)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V2302 V2303) (let Typecheck (shen.typecheck V2302 V2303) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V2302) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V2304) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V2304) V2304))

(defun shen.extract-pvars (V2309) (cond ((shen.pvar? V2309) (cons V2309 ())) ((cons? V2309) (union (shen.extract-pvars (hd V2309)) (shen.extract-pvars (tl V2309)))) (true ())))

(defun shen.mult_subst (V2314 V2315 V2316) (cond ((= () V2314) V2316) ((= () V2315) V2316) ((and (cons? V2314) (cons? V2315)) (shen.mult_subst (tl V2314) (tl V2315) (subst (hd V2314) (hd V2315) V2316))) (true (shen.f_error shen.mult_subst))))



