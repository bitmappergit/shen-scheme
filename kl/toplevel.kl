"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3668) (cond ((= () V3668) ()) ((and (cons? V3668) (cons? (tl V3668))) (do (set (hd V3668) (hd (tl V3668))) (shen.multiple-set (tl (tl V3668))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3670) (declare V3670 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3682 V3683) (cond ((and (tuple? V3682) (and (cons? (snd V3682)) (element? (hd (snd V3682)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3682) (tl (snd V3682))) V3683)) ((and (tuple? V3682) (and (cons? (snd V3682)) (and (cons? (tl (snd V3682))) (and (= () (tl (tl (snd V3682)))) (and (cons? V3683) (and (= (hd (snd V3682)) (shen.exclamation)) (= (hd (tl (snd V3682))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3683))) (hd V3683))) ((and (tuple? V3682) (and (cons? (snd V3682)) (= (hd (snd V3682)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3682)) V3683) (let Find (head (shen.find-past-inputs Key? V3683)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3682) (and (cons? (snd V3682)) (and (= () (tl (snd V3682))) (= (hd (snd V3682)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3683) 0) (abort))) ((and (tuple? V3682) (and (cons? (snd V3682)) (= (hd (snd V3682)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3682)) V3683) (let Pastprint (shen.print-past-inputs Key? (reverse V3683) 0) (abort)))) (true V3682)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3685) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V3685) (nl 1)))

(defun shen.update_history (V3688 V3689) (set shen.*history* (cons V3688 V3689)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V3693 V3694) (cond ((= V3693 (shen.hat)) (simple-error "line read aborted")) ((element? V3693 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3694 (lambda E shen.nextline)) (let It (shen.record-it V3694) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V3694 (cons V3693 ()))) (@p Line V3694))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V3694 (cons V3693 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3700) (cond ((= + V3700) (set shen.*tc* true)) ((= - V3700) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3702) (shen.toplevel_evaluate V3702 (value shen.*tc*)))

(defun shen.find-past-inputs (V3705 V3706) (let F (shen.find V3705 V3706) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3709 V3710) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3709 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3710)))) (lambda X (shen.prefix? V3709 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3712) (cond ((and (cons? V3712) (= (hd V3712) (shen.space))) (shen.trim-gubbins (tl V3712))) ((and (cons? V3712) (= (hd V3712) (shen.newline))) (shen.trim-gubbins (tl V3712))) ((and (cons? V3712) (= (hd V3712) (shen.carriage-return))) (shen.trim-gubbins (tl V3712))) ((and (cons? V3712) (= (hd V3712) (shen.tab))) (shen.trim-gubbins (tl V3712))) ((and (cons? V3712) (= (hd V3712) (shen.left-round))) (shen.trim-gubbins (tl V3712))) (true V3712)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3721 V3722) (cond ((= () V3722) ()) ((and (cons? V3722) (V3721 (hd V3722))) (cons (hd V3722) (shen.find V3721 (tl V3722)))) ((cons? V3722) (shen.find V3721 (tl V3722))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3736 V3737) (cond ((= () V3736) true) ((and (cons? V3736) (and (cons? V3737) (= (hd V3737) (hd V3736)))) (shen.prefix? (tl V3736) (tl V3737))) (true false)))

(defun shen.print-past-inputs (V3749 V3750 V3751) (cond ((= () V3750) _) ((and (cons? V3750) (not (V3749 (hd V3750)))) (shen.print-past-inputs V3749 (tl V3750) (+ V3751 1))) ((and (cons? V3750) (tuple? (hd V3750))) (do (shen.prhush (shen.app V3751 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3750))) (shen.print-past-inputs V3749 (tl V3750) (+ V3751 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3754 V3755) (cond ((and (cons? V3754) (and (cons? (tl V3754)) (and (= : (hd (tl V3754))) (and (cons? (tl (tl V3754))) (and (= () (tl (tl (tl V3754)))) (= true V3755)))))) (shen.typecheck-and-evaluate (hd V3754) (hd (tl (tl V3754))))) ((and (cons? V3754) (cons? (tl V3754))) (do (shen.toplevel_evaluate (cons (hd V3754) ()) V3755) (do (nl 1) (shen.toplevel_evaluate (tl V3754) V3755)))) ((and (cons? V3754) (and (= () (tl V3754)) (= true V3755))) (shen.typecheck-and-evaluate (hd V3754) (gensym A))) ((and (cons? V3754) (and (= () (tl V3754)) (= false V3755))) (let Eval (shen.eval-without-macros (hd V3754)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3758 V3759) (let Typecheck (shen.typecheck V3758 V3759) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3758) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3761) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3761) V3761))

(defun shen.extract-pvars (V3767) (cond ((shen.pvar? V3767) (cons V3767 ())) ((cons? V3767) (union (shen.extract-pvars (hd V3767)) (shen.extract-pvars (tl V3767)))) (true ())))

(defun shen.mult_subst (V3775 V3776 V3777) (cond ((= () V3775) V3777) ((= () V3776) V3777) ((and (cons? V3775) (cons? V3776)) (shen.mult_subst (tl V3775) (tl V3776) (subst (hd V3775) (hd V3776) V3777))) (true (shen.f_error shen.mult_subst))))



