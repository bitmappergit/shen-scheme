"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (shen.loop)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V2240) (cond ((= () V2240) ()) ((and (cons? V2240) (cons? (tl V2240))) (do (set (hd V2240) (hd (tl V2240))) (shen.multiple-set (tl (tl V2240))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V2241) (declare V2241 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V2251 V2252) (cond ((and (tuple? V2251) (and (cons? (snd V2251)) (element? (hd (snd V2251)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V2251) (tl (snd V2251))) V2252)) ((and (tuple? V2251) (and (cons? (snd V2251)) (and (cons? (tl (snd V2251))) (and (= () (tl (tl (snd V2251)))) (and (cons? V2252) (and (= (hd (snd V2251)) (shen.exclamation)) (= (hd (tl (snd V2251))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V2252))) (hd V2252))) ((and (tuple? V2251) (and (cons? (snd V2251)) (= (hd (snd V2251)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V2251)) V2252) (let Find (head (shen.find-past-inputs Key? V2252)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V2251) (and (cons? (snd V2251)) (and (= () (tl (snd V2251))) (= (hd (snd V2251)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V2252) 0) (abort))) ((and (tuple? V2251) (and (cons? (snd V2251)) (= (hd (snd V2251)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V2251)) V2252) (let Pastprint (shen.print-past-inputs Key? (reverse V2252) 0) (abort)))) (true V2251)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V2253) (do (map (lambda Byte (pr (n->string Byte) (stoutput))) V2253) (nl 1)))

(defun shen.update_history (V2254 V2255) (set shen.*history* (cons V2254 V2255)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V2257 V2258) (cond ((= V2257 (shen.hat)) (simple-error "line read aborted")) ((element? V2257 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda V2238 (shen.<st_input> V2238)) V2258 (lambda E shen.nextline)) (let It (shen.record-it V2258) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V2258 (cons V2257 ()))) (@p Line V2258))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V2258 (cons V2257 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V2263) (cond ((= + V2263) (set shen.*tc* true)) ((= - V2263) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V2264) (shen.toplevel_evaluate V2264 (value shen.*tc*)))

(defun shen.find-past-inputs (V2265 V2266) (let F (shen.find V2265 V2266) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V2267 V2268) (let Atom (hd (compile (lambda V2239 (shen.<st_input> V2239)) V2267 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V2268)))) (lambda X (shen.prefix? V2267 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V2269) (cond ((and (cons? V2269) (= (hd V2269) (shen.space))) (shen.trim-gubbins (tl V2269))) ((and (cons? V2269) (= (hd V2269) (shen.newline))) (shen.trim-gubbins (tl V2269))) ((and (cons? V2269) (= (hd V2269) (shen.carriage-return))) (shen.trim-gubbins (tl V2269))) ((and (cons? V2269) (= (hd V2269) (shen.tab))) (shen.trim-gubbins (tl V2269))) ((and (cons? V2269) (= (hd V2269) (shen.left-round))) (shen.trim-gubbins (tl V2269))) (true V2269)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V2276 V2277) (cond ((= () V2277) ()) ((and (cons? V2277) (V2276 (hd V2277))) (cons (hd V2277) (shen.find V2276 (tl V2277)))) ((cons? V2277) (shen.find V2276 (tl V2277))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V2289 V2290) (cond ((= () V2289) true) ((and (cons? V2289) (and (cons? V2290) (= (hd V2290) (hd V2289)))) (shen.prefix? (tl V2289) (tl V2290))) (true false)))

(defun shen.print-past-inputs (V2299 V2300 V2301) (cond ((= () V2300) _) ((and (cons? V2300) (not (V2299 (hd V2300)))) (shen.print-past-inputs V2299 (tl V2300) (+ V2301 1))) ((and (cons? V2300) (tuple? (hd V2300))) (do (shen.prhush (shen.app V2301 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V2300))) (shen.print-past-inputs V2299 (tl V2300) (+ V2301 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V2302 V2303) (cond ((and (cons? V2302) (and (cons? (tl V2302)) (and (= : (hd (tl V2302))) (and (cons? (tl (tl V2302))) (and (= () (tl (tl (tl V2302)))) (= true V2303)))))) (shen.typecheck-and-evaluate (hd V2302) (hd (tl (tl V2302))))) ((and (cons? V2302) (cons? (tl V2302))) (do (shen.toplevel_evaluate (cons (hd V2302) ()) V2303) (do (nl 1) (shen.toplevel_evaluate (tl V2302) V2303)))) ((and (cons? V2302) (and (= () (tl V2302)) (= true V2303))) (shen.typecheck-and-evaluate (hd V2302) (gensym A))) ((and (cons? V2302) (and (= () (tl V2302)) (= false V2303))) (let Eval (shen.eval-without-macros (hd V2302)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V2304 V2305) (let Typecheck (shen.typecheck V2304 V2305) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V2304) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V2306) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V2306) V2306))

(defun shen.extract-pvars (V2311) (cond ((shen.pvar? V2311) (cons V2311 ())) ((cons? V2311) (union (shen.extract-pvars (hd V2311)) (shen.extract-pvars (tl V2311)))) (true ())))

(defun shen.mult_subst (V2316 V2317 V2318) (cond ((= () V2316) V2318) ((= () V2317) V2318) ((and (cons? V2316) (cons? V2317)) (shen.mult_subst (tl V2316) (tl V2317) (subst (hd V2316) (hd V2317) V2318))) (true (shen.f_error shen.mult_subst))))



