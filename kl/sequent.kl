"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2478) (cond ((and (cons? V2478) (and (cons? (tl V2478)) (= () (tl (tl V2478))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2478)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2480) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2480) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2480) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2482) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2482) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2482) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2484) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2484) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2484) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2486) (let YaccParse (if (and (cons? (hd V2486)) (= if (hd (hd V2486)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2486)) (shen.hdtl V2486))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2486)) (= let (hd (hd V2486)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2486)) (shen.hdtl V2486))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2488) (if (cons? (hd V2488)) (let Parse_X (hd (hd V2488)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2488)) (shen.hdtl V2488))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2490) (if (cons? (hd V2490)) (let Parse_X (hd (hd V2490)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2490)) (shen.hdtl V2490))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2492) (cond ((and (cons? V2492) (and (cons? (tl V2492)) (and (cons? (tl (tl V2492))) (and (= () (tl (tl (tl V2492)))) (= (hd (tl V2492)) bar!))))) (cons (hd V2492) (hd (tl (tl V2492))))) ((cons? V2492) (cons (shen.remove-bar (hd V2492)) (shen.remove-bar (tl V2492)))) (true V2492)))

(defun shen.<premises> (V2494) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2494) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2494) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2496) (if (cons? (hd V2496)) (let Parse_X (hd (hd V2496)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2496)) (shen.hdtl V2496))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2498) (let YaccParse (if (and (cons? (hd V2498)) (= ! (hd (hd V2498)))) (shen.pair (hd (shen.pair (tl (hd V2498)) (shen.hdtl V2498))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2498) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2498) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2500) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2500) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2500) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2503 V2504) (@p V2503 V2504))

(defun shen.<formulae> (V2506) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2506) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2506) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2506) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2508) (if (cons? (hd V2508)) (let Parse_X (hd (hd V2508)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2508)) (shen.hdtl V2508))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2510) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2510) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2510) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2512) (let Parse_shen.<expr> (shen.<expr> V2512) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2514) (if (cons? (hd V2514)) (let Parse_X (hd (hd V2514)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2514)) (shen.hdtl V2514))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2516) (if (cons? (hd V2516)) (let Parse_X (hd (hd V2516)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2516)) (shen.hdtl V2516))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2518) (and (symbol? V2518) (shen.sh? (str V2518))))

(defun shen.sh? (V2520) (cond ((= "_" V2520) true) (true (and (= (pos V2520 0) "_") (shen.sh? (tlstr V2520))))))

(defun shen.doubleunderline? (V2522) (and (symbol? V2522) (shen.dh? (str V2522))))

(defun shen.dh? (V2524) (cond ((= "=" V2524) true) (true (and (= (pos V2524 0) "=") (shen.dh? (tlstr V2524))))))

(defun shen.process-datatype (V2527 V2528) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2527 V2528))))

(defun shen.remember-datatype (V2534) (cond ((cons? V2534) (do (set shen.*datatypes* (adjoin (hd V2534) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2534) (value shen.*alldatatypes*))) (hd V2534)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2539 V2540) (cond ((= () V2540) ()) ((and (cons? V2540) (and (tuple? (hd V2540)) (= shen.single (fst (hd V2540))))) (cons (shen.rule->horn-clause V2539 (snd (hd V2540))) (shen.rules->horn-clauses V2539 (tl V2540)))) ((and (cons? V2540) (and (tuple? (hd V2540)) (= shen.double (fst (hd V2540))))) (shen.rules->horn-clauses V2539 (append (shen.double->singles (snd (hd V2540))) (tl V2540)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2542) (cons (shen.right-rule V2542) (cons (shen.left-rule V2542) ())))

(defun shen.right-rule (V2544) (@p shen.single V2544))

(defun shen.left-rule (V2546) (cond ((and (cons? V2546) (and (cons? (tl V2546)) (and (cons? (tl (tl V2546))) (and (tuple? (hd (tl (tl V2546)))) (and (= () (fst (hd (tl (tl V2546))))) (= () (tl (tl (tl V2546))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2546)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2546))) Q) ()) (@p shen.single (cons (hd V2546) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2552) (cond ((and (tuple? V2552) (= () (fst V2552))) (snd V2552)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2555 V2556) (cond ((and (cons? V2556) (and (cons? (tl V2556)) (and (cons? (tl (tl V2556))) (and (tuple? (hd (tl (tl V2556)))) (= () (tl (tl (tl V2556)))))))) (cons (shen.rule->horn-clause-head V2555 (snd (hd (tl (tl V2556))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2556) (hd (tl V2556)) (fst (hd (tl (tl V2556))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2559 V2560) (cons V2559 (cons (shen.mode-ify V2560) (cons Context_1957 ()))))

(defun shen.mode-ify (V2562) (cond ((and (cons? V2562) (and (cons? (tl V2562)) (and (= : (hd (tl V2562))) (and (cons? (tl (tl V2562))) (= () (tl (tl (tl V2562)))))))) (cons mode (cons (cons (hd V2562) (cons : (cons (cons mode (cons (hd (tl (tl V2562))) (cons + ()))) ()))) (cons - ())))) (true V2562)))

(defun shen.rule->horn-clause-body (V2566 V2567 V2568) (let Variables (map (lambda X (shen.extract_vars X)) V2568) (let Predicates (map (lambda X (gensym shen.cl)) V2568) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2568 Variables) (let SideLiterals (shen.construct-side-literals V2566) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2568))) V2567) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2577 V2578 V2579 V2580) (cond ((and (= () V2577) (= () V2578)) ()) (true (shen.csl-help V2577 V2578 V2579 V2580))))

(defun shen.csl-help (V2587 V2588 V2589 V2590) (cond ((and (= () V2587) (= () V2588)) (cons (cons bind (cons ContextOut_1957 (cons V2589 ()))) ())) ((and (cons? V2587) (cons? V2588)) (cons (cons (hd V2587) (cons V2589 (cons V2590 (hd V2588)))) (shen.csl-help (tl V2587) (tl V2588) V2590 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2594 V2595 V2596) (cond ((and (= () V2594) (and (= () V2595) (= () V2596))) shen.skip) ((and (cons? V2594) (and (cons? V2595) (cons? V2596))) (do (shen.construct-search-clause (hd V2594) (hd V2595) (hd V2596)) (shen.construct-search-clauses (tl V2594) (tl V2595) (tl V2596)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2600 V2601 V2602) (shen.s-prolog (cons (shen.construct-base-search-clause V2600 V2601 V2602) (cons (shen.construct-recursive-search-clause V2600 V2601 V2602) ()))))

(defun shen.construct-base-search-clause (V2606 V2607 V2608) (cons (cons V2606 (cons (cons (shen.mode-ify V2607) In_1957) (cons In_1957 V2608))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2612 V2613 V2614) (cons (cons V2612 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2614))) (cons :- (cons (cons (cons V2612 (cons Assumptions_1957 (cons Out_1957 V2614))) ()) ()))))

(defun shen.construct-side-literals (V2620) (cond ((= () V2620) ()) ((and (cons? V2620) (and (cons? (hd V2620)) (and (= if (hd (hd V2620))) (and (cons? (tl (hd V2620))) (= () (tl (tl (hd V2620)))))))) (cons (cons when (tl (hd V2620))) (shen.construct-side-literals (tl V2620)))) ((and (cons? V2620) (and (cons? (hd V2620)) (and (= let (hd (hd V2620))) (and (cons? (tl (hd V2620))) (and (cons? (tl (tl (hd V2620)))) (= () (tl (tl (tl (hd V2620)))))))))) (cons (cons is (tl (hd V2620))) (shen.construct-side-literals (tl V2620)))) ((cons? V2620) (shen.construct-side-literals (tl V2620))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2627 V2628) (cond ((tuple? V2627) (cons shen.t* (cons (shen.recursive_cons_form (snd V2627)) (cons (shen.construct-context V2628 (fst V2627)) ())))) ((= ! V2627) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2631 V2632) (cond ((and (= true V2631) (= () V2632)) Context_1957) ((and (= false V2631) (= () V2632)) ContextOut_1957) ((cons? V2632) (cons cons (cons (shen.recursive_cons_form (hd V2632)) (cons (shen.construct-context V2631 (tl V2632)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2634) (cond ((cons? V2634) (cons cons (cons (shen.recursive_cons_form (hd V2634)) (cons (shen.recursive_cons_form (tl V2634)) ())))) (true V2634)))

(defun preclude (V2636) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2636)))

(defun shen.preclude-h (V2638) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2638)) (value shen.*datatypes*)))

(defun include (V2640) (shen.include-h (map (lambda X (shen.intern-type X)) V2640)))

(defun shen.include-h (V2642) (let ValidTypes (intersection V2642 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2644) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2644))))

(defun include-all-but (V2646) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2646))))

(defun shen.synonyms-help (V2652) (cond ((= () V2652) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2652) (cons? (tl V2652))) (let Vs (difference (shen.extract_vars (hd (tl V2652))) (shen.extract_vars (hd V2652))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2652) (cons (hd (tl V2652)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2652)))) (shen.free_variable_warnings (hd (tl V2652)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2655 V2656) (if (element? V2655 (value V2656)) (value V2656) (set V2656 (cons V2655 (value V2656)))))

(defun shen.demod-rule (V2658) (cond ((and (cons? V2658) (and (cons? (tl V2658)) (= () (tl (tl V2658))))) (cons (shen.rcons_form (hd V2658)) (cons -> (cons (shen.rcons_form (hd (tl V2658))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.demodulation-function (V2661 V2662) (do (tc -) (do (eval (cons define (cons shen.demod (append V2662 (shen.default-rule))))) (do (if V2661 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



