"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V1361) (cond ((and (cons? V1361) (and (cons? (tl V1361)) (= () (tl (tl V1361))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V1361)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V1362) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V1362) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1362) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V1363) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V1363) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V1363) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V1364) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V1364) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1364) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V1365) (let YaccParse (if (and (cons? (hd V1365)) (= if (hd (hd V1365)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V1365)) (shen.hdtl V1365))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V1365)) (= let (hd (hd V1365)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V1365)) (shen.hdtl V1365))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V1366) (if (cons? (hd V1366)) (let Parse_X (hd (hd V1366)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1366)) (shen.hdtl V1366))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V1367) (if (cons? (hd V1367)) (let Parse_X (hd (hd V1367)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V1367)) (shen.hdtl V1367))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V1368) (cond ((and (cons? V1368) (and (cons? (tl V1368)) (and (cons? (tl (tl V1368))) (and (= () (tl (tl (tl V1368)))) (= (hd (tl V1368)) bar!))))) (cons (hd V1368) (hd (tl (tl V1368))))) ((cons? V1368) (cons (shen.remove-bar (hd V1368)) (shen.remove-bar (tl V1368)))) (true V1368)))

(defun shen.<premises> (V1369) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V1369) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1369) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V1370) (if (cons? (hd V1370)) (let Parse_X (hd (hd V1370)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1370)) (shen.hdtl V1370))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V1371) (let YaccParse (if (and (cons? (hd V1371)) (= ! (hd (hd V1371)))) (shen.pair (hd (shen.pair (tl (hd V1371)) (shen.hdtl V1371))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1371) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1371) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V1372) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1372) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1372) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V1373 V1374) (@p V1373 V1374))

(defun shen.<formulae> (V1375) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1375) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1375) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1375) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V1376) (if (cons? (hd V1376)) (let Parse_X (hd (hd V1376)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V1376)) (shen.hdtl V1376))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V1377) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V1377) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V1377) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V1378) (let Parse_shen.<expr> (shen.<expr> V1378) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V1379) (if (cons? (hd V1379)) (let Parse_X (hd (hd V1379)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1379)) (shen.hdtl V1379))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V1380) (if (cons? (hd V1380)) (let Parse_X (hd (hd V1380)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1380)) (shen.hdtl V1380))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V1381) (and (symbol? V1381) (shen.sh? (str V1381))))

(defun shen.sh? (V1382) (cond ((= "_" V1382) true) (true (and (= (pos V1382 0) "_") (shen.sh? (tlstr V1382))))))

(defun shen.doubleunderline? (V1383) (and (symbol? V1383) (shen.dh? (str V1383))))

(defun shen.dh? (V1384) (cond ((= "=" V1384) true) (true (and (= (pos V1384 0) "=") (shen.dh? (tlstr V1384))))))

(defun shen.process-datatype (V1385 V1386) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V1385 V1386))))

(defun shen.remember-datatype (V1391) (cond ((cons? V1391) (do (set shen.*datatypes* (adjoin (hd V1391) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V1391) (value shen.*alldatatypes*))) (hd V1391)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V1394 V1395) (cond ((= () V1395) ()) ((and (cons? V1395) (and (tuple? (hd V1395)) (= shen.single (fst (hd V1395))))) (cons (shen.rule->horn-clause V1394 (snd (hd V1395))) (shen.rules->horn-clauses V1394 (tl V1395)))) ((and (cons? V1395) (and (tuple? (hd V1395)) (= shen.double (fst (hd V1395))))) (shen.rules->horn-clauses V1394 (append (shen.double->singles (snd (hd V1395))) (tl V1395)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V1396) (cons (shen.right-rule V1396) (cons (shen.left-rule V1396) ())))

(defun shen.right-rule (V1397) (@p shen.single V1397))

(defun shen.left-rule (V1398) (cond ((and (cons? V1398) (and (cons? (tl V1398)) (and (cons? (tl (tl V1398))) (and (tuple? (hd (tl (tl V1398)))) (and (= () (fst (hd (tl (tl V1398))))) (= () (tl (tl (tl V1398))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V1398)))) ()) Q) (let NewPremises (cons (@p (map (lambda V1350 (shen.right->left V1350)) (hd (tl V1398))) Q) ()) (@p shen.single (cons (hd V1398) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V1403) (cond ((and (tuple? V1403) (= () (fst V1403))) (snd V1403)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V1404 V1405) (cond ((and (cons? V1405) (and (cons? (tl V1405)) (and (cons? (tl (tl V1405))) (and (tuple? (hd (tl (tl V1405)))) (= () (tl (tl (tl V1405)))))))) (cons (shen.rule->horn-clause-head V1404 (snd (hd (tl (tl V1405))))) (cons :- (cons (shen.rule->horn-clause-body (hd V1405) (hd (tl V1405)) (fst (hd (tl (tl V1405))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V1406 V1407) (cons V1406 (cons (shen.mode-ify V1407) (cons Context_1957 ()))))

(defun shen.mode-ify (V1408) (cond ((and (cons? V1408) (and (cons? (tl V1408)) (and (= : (hd (tl V1408))) (and (cons? (tl (tl V1408))) (= () (tl (tl (tl V1408)))))))) (cons mode (cons (cons (hd V1408) (cons : (cons (cons mode (cons (hd (tl (tl V1408))) (cons + ()))) ()))) (cons - ())))) (true V1408)))

(defun shen.rule->horn-clause-body (V1409 V1410 V1411) (let Variables (map (lambda V1351 (shen.extract_vars V1351)) V1411) (let Predicates (map (lambda X (gensym shen.cl)) V1411) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V1411 Variables) (let SideLiterals (shen.construct-side-literals V1409) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V1411))) V1410) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V1416 V1417 V1418 V1419) (cond ((and (= () V1416) (= () V1417)) ()) (true (shen.csl-help V1416 V1417 V1418 V1419))))

(defun shen.csl-help (V1422 V1423 V1424 V1425) (cond ((and (= () V1422) (= () V1423)) (cons (cons bind (cons ContextOut_1957 (cons V1424 ()))) ())) ((and (cons? V1422) (cons? V1423)) (cons (cons (hd V1422) (cons V1424 (cons V1425 (hd V1423)))) (shen.csl-help (tl V1422) (tl V1423) V1425 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V1426 V1427 V1428) (cond ((and (= () V1426) (and (= () V1427) (= () V1428))) shen.skip) ((and (cons? V1426) (and (cons? V1427) (cons? V1428))) (do (shen.construct-search-clause (hd V1426) (hd V1427) (hd V1428)) (shen.construct-search-clauses (tl V1426) (tl V1427) (tl V1428)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V1429 V1430 V1431) (shen.s-prolog (cons (shen.construct-base-search-clause V1429 V1430 V1431) (cons (shen.construct-recursive-search-clause V1429 V1430 V1431) ()))))

(defun shen.construct-base-search-clause (V1432 V1433 V1434) (cons (cons V1432 (cons (cons (shen.mode-ify V1433) In_1957) (cons In_1957 V1434))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V1435 V1436 V1437) (cons (cons V1435 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V1437))) (cons :- (cons (cons (cons V1435 (cons Assumptions_1957 (cons Out_1957 V1437))) ()) ()))))

(defun shen.construct-side-literals (V1442) (cond ((= () V1442) ()) ((and (cons? V1442) (and (cons? (hd V1442)) (and (= if (hd (hd V1442))) (and (cons? (tl (hd V1442))) (= () (tl (tl (hd V1442)))))))) (cons (cons when (tl (hd V1442))) (shen.construct-side-literals (tl V1442)))) ((and (cons? V1442) (and (cons? (hd V1442)) (and (= let (hd (hd V1442))) (and (cons? (tl (hd V1442))) (and (cons? (tl (tl (hd V1442)))) (= () (tl (tl (tl (hd V1442)))))))))) (cons (cons is (tl (hd V1442))) (shen.construct-side-literals (tl V1442)))) ((cons? V1442) (shen.construct-side-literals (tl V1442))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V1447 V1448) (cond ((tuple? V1447) (cons shen.t* (cons (shen.recursive_cons_form (snd V1447)) (cons (shen.construct-context V1448 (fst V1447)) ())))) ((= ! V1447) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V1449 V1450) (cond ((and (= true V1449) (= () V1450)) Context_1957) ((and (= false V1449) (= () V1450)) ContextOut_1957) ((cons? V1450) (cons cons (cons (shen.recursive_cons_form (hd V1450)) (cons (shen.construct-context V1449 (tl V1450)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V1451) (cond ((cons? V1451) (cons cons (cons (shen.recursive_cons_form (hd V1451)) (cons (shen.recursive_cons_form (tl V1451)) ())))) (true V1451)))

(defun preclude (V1452) (shen.preclude-h (map (lambda V1352 (shen.intern-type V1352)) V1452)))

(defun shen.preclude-h (V1453) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V1453)) (value shen.*datatypes*)))

(defun include (V1454) (shen.include-h (map (lambda V1353 (shen.intern-type V1353)) V1454)))

(defun shen.include-h (V1455) (let ValidTypes (intersection V1455 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V1456) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda V1354 (shen.intern-type V1354)) V1456))))

(defun include-all-but (V1457) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda V1355 (shen.intern-type V1355)) V1457))))

(defun shen.synonyms-help (V1462) (cond ((= () V1462) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda V1356 (shen.demod-rule V1356)) (value shen.*synonyms*)))) ((and (cons? V1462) (cons? (tl V1462))) (let Vs (difference (shen.extract_vars (hd (tl V1462))) (shen.extract_vars (hd V1462))) (if (empty? Vs) (do (shen.pushnew (cons (hd V1462) (cons (hd (tl V1462)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V1462)))) (shen.free_variable_warnings (hd (tl V1462)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V1463 V1464) (if (element? V1463 (value V1464)) (value V1464) (set V1464 (cons V1463 (value V1464)))))

(defun shen.demod-rule (V1465) (cond ((and (cons? V1465) (and (cons? (tl V1465)) (= () (tl (tl V1465))))) (cons (shen.rcons_form (hd V1465)) (cons -> (cons (shen.rcons_form (hd (tl V1465))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.demodulation-function (V1466 V1467) (do (tc -) (do (eval (cons define (cons shen.demod (append V1467 (shen.default-rule))))) (do (if V1466 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



