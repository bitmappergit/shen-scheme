"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2428) (cond ((and (cons? V2428) (and (cons? (tl V2428)) (= () (tl (tl V2428))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2428)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2430) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2430) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2430) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2432) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2432) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2432) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2434) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2434) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2434) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2436) (let YaccParse (if (and (cons? (hd V2436)) (= if (hd (hd V2436)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2436)) (shen.hdtl V2436))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2436)) (= let (hd (hd V2436)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2436)) (shen.hdtl V2436))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2438) (if (cons? (hd V2438)) (let Parse_X (hd (hd V2438)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2438)) (shen.hdtl V2438))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2440) (if (cons? (hd V2440)) (let Parse_X (hd (hd V2440)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2440)) (shen.hdtl V2440))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2442) (cond ((and (cons? V2442) (and (cons? (tl V2442)) (and (cons? (tl (tl V2442))) (and (= () (tl (tl (tl V2442)))) (= (hd (tl V2442)) bar!))))) (cons (hd V2442) (hd (tl (tl V2442))))) ((cons? V2442) (cons (shen.remove-bar (hd V2442)) (shen.remove-bar (tl V2442)))) (true V2442)))

(defun shen.<premises> (V2444) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2444) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2444) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2446) (if (cons? (hd V2446)) (let Parse_X (hd (hd V2446)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2446)) (shen.hdtl V2446))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2448) (let YaccParse (if (and (cons? (hd V2448)) (= ! (hd (hd V2448)))) (shen.pair (hd (shen.pair (tl (hd V2448)) (shen.hdtl V2448))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2448) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2448) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2450) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2450) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2450) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2453 V2454) (@p V2453 V2454))

(defun shen.<formulae> (V2456) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2456) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2456) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2456) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2458) (if (cons? (hd V2458)) (let Parse_X (hd (hd V2458)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2458)) (shen.hdtl V2458))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2460) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2460) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2460) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2462) (let Parse_shen.<expr> (shen.<expr> V2462) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2464) (if (cons? (hd V2464)) (let Parse_X (hd (hd V2464)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2464)) (shen.hdtl V2464))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2466) (if (cons? (hd V2466)) (let Parse_X (hd (hd V2466)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2466)) (shen.hdtl V2466))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2468) (and (symbol? V2468) (shen.sh? (str V2468))))

(defun shen.sh? (V2470) (cond ((= "_" V2470) true) (true (and (= (pos V2470 0) "_") (shen.sh? (tlstr V2470))))))

(defun shen.doubleunderline? (V2472) (and (symbol? V2472) (shen.dh? (str V2472))))

(defun shen.dh? (V2474) (cond ((= "=" V2474) true) (true (and (= (pos V2474 0) "=") (shen.dh? (tlstr V2474))))))

(defun shen.process-datatype (V2477 V2478) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2477 V2478))))

(defun shen.remember-datatype (V2484) (cond ((cons? V2484) (do (set shen.*datatypes* (adjoin (hd V2484) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2484) (value shen.*alldatatypes*))) (hd V2484)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2489 V2490) (cond ((= () V2490) ()) ((and (cons? V2490) (and (tuple? (hd V2490)) (= shen.single (fst (hd V2490))))) (cons (shen.rule->horn-clause V2489 (snd (hd V2490))) (shen.rules->horn-clauses V2489 (tl V2490)))) ((and (cons? V2490) (and (tuple? (hd V2490)) (= shen.double (fst (hd V2490))))) (shen.rules->horn-clauses V2489 (append (shen.double->singles (snd (hd V2490))) (tl V2490)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2492) (cons (shen.right-rule V2492) (cons (shen.left-rule V2492) ())))

(defun shen.right-rule (V2494) (@p shen.single V2494))

(defun shen.left-rule (V2496) (cond ((and (cons? V2496) (and (cons? (tl V2496)) (and (cons? (tl (tl V2496))) (and (tuple? (hd (tl (tl V2496)))) (and (= () (fst (hd (tl (tl V2496))))) (= () (tl (tl (tl V2496))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2496)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2496))) Q) ()) (@p shen.single (cons (hd V2496) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2502) (cond ((and (tuple? V2502) (= () (fst V2502))) (snd V2502)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2505 V2506) (cond ((and (cons? V2506) (and (cons? (tl V2506)) (and (cons? (tl (tl V2506))) (and (tuple? (hd (tl (tl V2506)))) (= () (tl (tl (tl V2506)))))))) (cons (shen.rule->horn-clause-head V2505 (snd (hd (tl (tl V2506))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2506) (hd (tl V2506)) (fst (hd (tl (tl V2506))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2509 V2510) (cons V2509 (cons (shen.mode-ify V2510) (cons Context_1957 ()))))

(defun shen.mode-ify (V2512) (cond ((and (cons? V2512) (and (cons? (tl V2512)) (and (= : (hd (tl V2512))) (and (cons? (tl (tl V2512))) (= () (tl (tl (tl V2512)))))))) (cons mode (cons (cons (hd V2512) (cons : (cons (cons mode (cons (hd (tl (tl V2512))) (cons + ()))) ()))) (cons - ())))) (true V2512)))

(defun shen.rule->horn-clause-body (V2516 V2517 V2518) (let Variables (map (lambda X (shen.extract_vars X)) V2518) (let Predicates (map (lambda X (gensym shen.cl)) V2518) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2518 Variables) (let SideLiterals (shen.construct-side-literals V2516) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2518))) V2517) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2527 V2528 V2529 V2530) (cond ((and (= () V2527) (= () V2528)) ()) (true (shen.csl-help V2527 V2528 V2529 V2530))))

(defun shen.csl-help (V2537 V2538 V2539 V2540) (cond ((and (= () V2537) (= () V2538)) (cons (cons bind (cons ContextOut_1957 (cons V2539 ()))) ())) ((and (cons? V2537) (cons? V2538)) (cons (cons (hd V2537) (cons V2539 (cons V2540 (hd V2538)))) (shen.csl-help (tl V2537) (tl V2538) V2540 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2544 V2545 V2546) (cond ((and (= () V2544) (and (= () V2545) (= () V2546))) shen.skip) ((and (cons? V2544) (and (cons? V2545) (cons? V2546))) (do (shen.construct-search-clause (hd V2544) (hd V2545) (hd V2546)) (shen.construct-search-clauses (tl V2544) (tl V2545) (tl V2546)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2550 V2551 V2552) (shen.s-prolog (cons (shen.construct-base-search-clause V2550 V2551 V2552) (cons (shen.construct-recursive-search-clause V2550 V2551 V2552) ()))))

(defun shen.construct-base-search-clause (V2556 V2557 V2558) (cons (cons V2556 (cons (cons (shen.mode-ify V2557) In_1957) (cons In_1957 V2558))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2562 V2563 V2564) (cons (cons V2562 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2564))) (cons :- (cons (cons (cons V2562 (cons Assumptions_1957 (cons Out_1957 V2564))) ()) ()))))

(defun shen.construct-side-literals (V2570) (cond ((= () V2570) ()) ((and (cons? V2570) (and (cons? (hd V2570)) (and (= if (hd (hd V2570))) (and (cons? (tl (hd V2570))) (= () (tl (tl (hd V2570)))))))) (cons (cons when (tl (hd V2570))) (shen.construct-side-literals (tl V2570)))) ((and (cons? V2570) (and (cons? (hd V2570)) (and (= let (hd (hd V2570))) (and (cons? (tl (hd V2570))) (and (cons? (tl (tl (hd V2570)))) (= () (tl (tl (tl (hd V2570)))))))))) (cons (cons is (tl (hd V2570))) (shen.construct-side-literals (tl V2570)))) ((cons? V2570) (shen.construct-side-literals (tl V2570))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2577 V2578) (cond ((tuple? V2577) (cons shen.t* (cons (shen.recursive_cons_form (snd V2577)) (cons (shen.construct-context V2578 (fst V2577)) ())))) ((= ! V2577) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2581 V2582) (cond ((and (= true V2581) (= () V2582)) Context_1957) ((and (= false V2581) (= () V2582)) ContextOut_1957) ((cons? V2582) (cons cons (cons (shen.recursive_cons_form (hd V2582)) (cons (shen.construct-context V2581 (tl V2582)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2584) (cond ((cons? V2584) (cons cons (cons (shen.recursive_cons_form (hd V2584)) (cons (shen.recursive_cons_form (tl V2584)) ())))) (true V2584)))

(defun preclude (V2586) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2586)))

(defun shen.preclude-h (V2588) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2588)) (value shen.*datatypes*)))

(defun include (V2590) (shen.include-h (map (lambda X (shen.intern-type X)) V2590)))

(defun shen.include-h (V2592) (let ValidTypes (intersection V2592 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2594) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2594))))

(defun include-all-but (V2596) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2596))))

(defun shen.synonyms-help (V2602) (cond ((= () V2602) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2602) (cons? (tl V2602))) (let Vs (difference (shen.extract_vars (hd (tl V2602))) (shen.extract_vars (hd V2602))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2602) (cons (hd (tl V2602)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2602)))) (shen.free_variable_warnings (hd (tl V2602)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2605 V2606) (if (element? V2605 (value V2606)) (value V2606) (set V2606 (cons V2605 (value V2606)))))

(defun shen.demod-rule (V2608) (cond ((and (cons? V2608) (and (cons? (tl V2608)) (= () (tl (tl V2608))))) (cons (shen.rcons_form (hd V2608)) (cons -> (cons (shen.rcons_form (hd (tl V2608))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.demodulation-function (V2611 V2612) (do (tc -) (do (eval (cons define (cons shen.demod (append V2612 (shen.default-rule))))) (do (if V2611 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



