"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V1359) (cond ((and (cons? V1359) (and (cons? (tl V1359)) (= () (tl (tl V1359))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V1359)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V1360) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V1360) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1360) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V1361) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V1361) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V1361) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V1362) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V1362) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1362) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V1363) (let YaccParse (if (and (cons? (hd V1363)) (= if (hd (hd V1363)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V1363)) (shen.hdtl V1363))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V1363)) (= let (hd (hd V1363)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V1363)) (shen.hdtl V1363))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V1364) (if (cons? (hd V1364)) (let Parse_X (hd (hd V1364)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1364)) (shen.hdtl V1364))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V1365) (if (cons? (hd V1365)) (let Parse_X (hd (hd V1365)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V1365)) (shen.hdtl V1365))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V1366) (cond ((and (cons? V1366) (and (cons? (tl V1366)) (and (cons? (tl (tl V1366))) (and (= () (tl (tl (tl V1366)))) (= (hd (tl V1366)) bar!))))) (cons (hd V1366) (hd (tl (tl V1366))))) ((cons? V1366) (cons (shen.remove-bar (hd V1366)) (shen.remove-bar (tl V1366)))) (true V1366)))

(defun shen.<premises> (V1367) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V1367) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1367) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V1368) (if (cons? (hd V1368)) (let Parse_X (hd (hd V1368)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1368)) (shen.hdtl V1368))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V1369) (let YaccParse (if (and (cons? (hd V1369)) (= ! (hd (hd V1369)))) (shen.pair (hd (shen.pair (tl (hd V1369)) (shen.hdtl V1369))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1369) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1369) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V1370) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1370) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1370) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V1371 V1372) (@p V1371 V1372))

(defun shen.<formulae> (V1373) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1373) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1373) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1373) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V1374) (if (cons? (hd V1374)) (let Parse_X (hd (hd V1374)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V1374)) (shen.hdtl V1374))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V1375) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V1375) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V1375) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V1376) (let Parse_shen.<expr> (shen.<expr> V1376) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V1377) (if (cons? (hd V1377)) (let Parse_X (hd (hd V1377)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1377)) (shen.hdtl V1377))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V1378) (if (cons? (hd V1378)) (let Parse_X (hd (hd V1378)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1378)) (shen.hdtl V1378))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V1379) (and (symbol? V1379) (shen.sh? (str V1379))))

(defun shen.sh? (V1380) (cond ((= "_" V1380) true) (true (and (= (pos V1380 0) "_") (shen.sh? (tlstr V1380))))))

(defun shen.doubleunderline? (V1381) (and (symbol? V1381) (shen.dh? (str V1381))))

(defun shen.dh? (V1382) (cond ((= "=" V1382) true) (true (and (= (pos V1382 0) "=") (shen.dh? (tlstr V1382))))))

(defun shen.process-datatype (V1383 V1384) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V1383 V1384))))

(defun shen.remember-datatype (V1389) (cond ((cons? V1389) (do (set shen.*datatypes* (adjoin (hd V1389) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V1389) (value shen.*alldatatypes*))) (hd V1389)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V1392 V1393) (cond ((= () V1393) ()) ((and (cons? V1393) (and (tuple? (hd V1393)) (= shen.single (fst (hd V1393))))) (cons (shen.rule->horn-clause V1392 (snd (hd V1393))) (shen.rules->horn-clauses V1392 (tl V1393)))) ((and (cons? V1393) (and (tuple? (hd V1393)) (= shen.double (fst (hd V1393))))) (shen.rules->horn-clauses V1392 (append (shen.double->singles (snd (hd V1393))) (tl V1393)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V1394) (cons (shen.right-rule V1394) (cons (shen.left-rule V1394) ())))

(defun shen.right-rule (V1395) (@p shen.single V1395))

(defun shen.left-rule (V1396) (cond ((and (cons? V1396) (and (cons? (tl V1396)) (and (cons? (tl (tl V1396))) (and (tuple? (hd (tl (tl V1396)))) (and (= () (fst (hd (tl (tl V1396))))) (= () (tl (tl (tl V1396))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V1396)))) ()) Q) (let NewPremises (cons (@p (map (lambda V1348 (shen.right->left V1348)) (hd (tl V1396))) Q) ()) (@p shen.single (cons (hd V1396) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V1401) (cond ((and (tuple? V1401) (= () (fst V1401))) (snd V1401)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V1402 V1403) (cond ((and (cons? V1403) (and (cons? (tl V1403)) (and (cons? (tl (tl V1403))) (and (tuple? (hd (tl (tl V1403)))) (= () (tl (tl (tl V1403)))))))) (cons (shen.rule->horn-clause-head V1402 (snd (hd (tl (tl V1403))))) (cons :- (cons (shen.rule->horn-clause-body (hd V1403) (hd (tl V1403)) (fst (hd (tl (tl V1403))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V1404 V1405) (cons V1404 (cons (shen.mode-ify V1405) (cons Context_1957 ()))))

(defun shen.mode-ify (V1406) (cond ((and (cons? V1406) (and (cons? (tl V1406)) (and (= : (hd (tl V1406))) (and (cons? (tl (tl V1406))) (= () (tl (tl (tl V1406)))))))) (cons mode (cons (cons (hd V1406) (cons : (cons (cons mode (cons (hd (tl (tl V1406))) (cons + ()))) ()))) (cons - ())))) (true V1406)))

(defun shen.rule->horn-clause-body (V1407 V1408 V1409) (let Variables (map (lambda V1349 (shen.extract_vars V1349)) V1409) (let Predicates (map (lambda X (gensym shen.cl)) V1409) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V1409 Variables) (let SideLiterals (shen.construct-side-literals V1407) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V1409))) V1408) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V1414 V1415 V1416 V1417) (cond ((and (= () V1414) (= () V1415)) ()) (true (shen.csl-help V1414 V1415 V1416 V1417))))

(defun shen.csl-help (V1420 V1421 V1422 V1423) (cond ((and (= () V1420) (= () V1421)) (cons (cons bind (cons ContextOut_1957 (cons V1422 ()))) ())) ((and (cons? V1420) (cons? V1421)) (cons (cons (hd V1420) (cons V1422 (cons V1423 (hd V1421)))) (shen.csl-help (tl V1420) (tl V1421) V1423 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V1424 V1425 V1426) (cond ((and (= () V1424) (and (= () V1425) (= () V1426))) shen.skip) ((and (cons? V1424) (and (cons? V1425) (cons? V1426))) (do (shen.construct-search-clause (hd V1424) (hd V1425) (hd V1426)) (shen.construct-search-clauses (tl V1424) (tl V1425) (tl V1426)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V1427 V1428 V1429) (shen.s-prolog (cons (shen.construct-base-search-clause V1427 V1428 V1429) (cons (shen.construct-recursive-search-clause V1427 V1428 V1429) ()))))

(defun shen.construct-base-search-clause (V1430 V1431 V1432) (cons (cons V1430 (cons (cons (shen.mode-ify V1431) In_1957) (cons In_1957 V1432))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V1433 V1434 V1435) (cons (cons V1433 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V1435))) (cons :- (cons (cons (cons V1433 (cons Assumptions_1957 (cons Out_1957 V1435))) ()) ()))))

(defun shen.construct-side-literals (V1440) (cond ((= () V1440) ()) ((and (cons? V1440) (and (cons? (hd V1440)) (and (= if (hd (hd V1440))) (and (cons? (tl (hd V1440))) (= () (tl (tl (hd V1440)))))))) (cons (cons when (tl (hd V1440))) (shen.construct-side-literals (tl V1440)))) ((and (cons? V1440) (and (cons? (hd V1440)) (and (= let (hd (hd V1440))) (and (cons? (tl (hd V1440))) (and (cons? (tl (tl (hd V1440)))) (= () (tl (tl (tl (hd V1440)))))))))) (cons (cons is (tl (hd V1440))) (shen.construct-side-literals (tl V1440)))) ((cons? V1440) (shen.construct-side-literals (tl V1440))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V1445 V1446) (cond ((tuple? V1445) (cons shen.t* (cons (shen.recursive_cons_form (snd V1445)) (cons (shen.construct-context V1446 (fst V1445)) ())))) ((= ! V1445) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V1447 V1448) (cond ((and (= true V1447) (= () V1448)) Context_1957) ((and (= false V1447) (= () V1448)) ContextOut_1957) ((cons? V1448) (cons cons (cons (shen.recursive_cons_form (hd V1448)) (cons (shen.construct-context V1447 (tl V1448)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V1449) (cond ((cons? V1449) (cons cons (cons (shen.recursive_cons_form (hd V1449)) (cons (shen.recursive_cons_form (tl V1449)) ())))) (true V1449)))

(defun preclude (V1450) (shen.preclude-h (map (lambda V1350 (shen.intern-type V1350)) V1450)))

(defun shen.preclude-h (V1451) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V1451)) (value shen.*datatypes*)))

(defun include (V1452) (shen.include-h (map (lambda V1351 (shen.intern-type V1351)) V1452)))

(defun shen.include-h (V1453) (let ValidTypes (intersection V1453 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V1454) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda V1352 (shen.intern-type V1352)) V1454))))

(defun include-all-but (V1455) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda V1353 (shen.intern-type V1353)) V1455))))

(defun shen.synonyms-help (V1460) (cond ((= () V1460) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda V1354 (shen.demod-rule V1354)) (value shen.*synonyms*)))) ((and (cons? V1460) (cons? (tl V1460))) (let Vs (difference (shen.extract_vars (hd (tl V1460))) (shen.extract_vars (hd V1460))) (if (empty? Vs) (do (shen.pushnew (cons (hd V1460) (cons (hd (tl V1460)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V1460)))) (shen.free_variable_warnings (hd (tl V1460)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V1461 V1462) (if (element? V1461 (value V1462)) (value V1462) (set V1462 (cons V1461 (value V1462)))))

(defun shen.demod-rule (V1463) (cond ((and (cons? V1463) (and (cons? (tl V1463)) (= () (tl (tl V1463))))) (cons (shen.rcons_form (hd V1463)) (cons -> (cons (shen.rcons_form (hd (tl V1463))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.demodulation-function (V1464 V1465) (do (tc -) (do (eval (cons define (cons shen.demod (append V1465 (shen.default-rule))))) (do (if V1464 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



