"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V2380 V2381) (trap-error (shen.prh V2380 V2381 0) (lambda E V2380)))

(defun shen.prh (V2382 V2383 V2384) (shen.prh V2382 V2383 (shen.write-char-and-inc V2382 V2383 V2384)))

(defun shen.write-char-and-inc (V2385 V2386 V2387) (do (write-byte (string->n (pos V2385 V2387)) V2386) (+ V2387 1)))

(defun print (V2388) (let String (shen.insert V2388 "~S") (let Print (shen.prhush String (stoutput)) V2388)))

(defun shen.prhush (V2389 V2390) (if (value *hush*) V2389 (pr V2389 V2390)))

(defun shen.mkstr (V2391 V2392) (cond ((string? V2391) (shen.mkstr-l (shen.proc-nl V2391) V2392)) (true (shen.mkstr-r (cons shen.proc-nl (cons V2391 ())) V2392))))

(defun shen.mkstr-l (V2393 V2394) (cond ((= () V2394) V2393) ((cons? V2394) (shen.mkstr-l (shen.insert-l (hd V2394) V2393) (tl V2394))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V2397 V2398) (cond ((= "" V2398) "") ((and (shen.+string? V2398) (and (= "~" (pos V2398 0)) (and (shen.+string? (tlstr V2398)) (= "A" (pos (tlstr V2398) 0))))) (cons shen.app (cons V2397 (cons (tlstr (tlstr V2398)) (cons shen.a ()))))) ((and (shen.+string? V2398) (and (= "~" (pos V2398 0)) (and (shen.+string? (tlstr V2398)) (= "R" (pos (tlstr V2398) 0))))) (cons shen.app (cons V2397 (cons (tlstr (tlstr V2398)) (cons shen.r ()))))) ((and (shen.+string? V2398) (and (= "~" (pos V2398 0)) (and (shen.+string? (tlstr V2398)) (= "S" (pos (tlstr V2398) 0))))) (cons shen.app (cons V2397 (cons (tlstr (tlstr V2398)) (cons shen.s ()))))) ((shen.+string? V2398) (shen.factor-cn (cons cn (cons (pos V2398 0) (cons (shen.insert-l V2397 (tlstr V2398)) ()))))) ((and (cons? V2398) (and (= cn (hd V2398)) (and (cons? (tl V2398)) (and (cons? (tl (tl V2398))) (= () (tl (tl (tl V2398)))))))) (cons cn (cons (hd (tl V2398)) (cons (shen.insert-l V2397 (hd (tl (tl V2398)))) ())))) ((and (cons? V2398) (and (= shen.app (hd V2398)) (and (cons? (tl V2398)) (and (cons? (tl (tl V2398))) (and (cons? (tl (tl (tl V2398)))) (= () (tl (tl (tl (tl V2398)))))))))) (cons shen.app (cons (hd (tl V2398)) (cons (shen.insert-l V2397 (hd (tl (tl V2398)))) (tl (tl (tl V2398))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V2399) (cond ((and (cons? V2399) (and (= cn (hd V2399)) (and (cons? (tl V2399)) (and (cons? (tl (tl V2399))) (and (cons? (hd (tl (tl V2399)))) (and (= cn (hd (hd (tl (tl V2399))))) (and (cons? (tl (hd (tl (tl V2399))))) (and (cons? (tl (tl (hd (tl (tl V2399)))))) (and (= () (tl (tl (tl (hd (tl (tl V2399))))))) (and (= () (tl (tl (tl V2399)))) (and (string? (hd (tl V2399))) (string? (hd (tl (hd (tl (tl V2399))))))))))))))))) (cons cn (cons (cn (hd (tl V2399)) (hd (tl (hd (tl (tl V2399)))))) (tl (tl (hd (tl (tl V2399)))))))) (true V2399)))

(defun shen.proc-nl (V2400) (cond ((= "" V2400) "") ((and (shen.+string? V2400) (and (= "~" (pos V2400 0)) (and (shen.+string? (tlstr V2400)) (= "%" (pos (tlstr V2400) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V2400))))) ((shen.+string? V2400) (cn (pos V2400 0) (shen.proc-nl (tlstr V2400)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V2401 V2402) (cond ((= () V2402) V2401) ((cons? V2402) (shen.mkstr-r (cons shen.insert (cons (hd V2402) (cons V2401 ()))) (tl V2402))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V2403 V2404) (shen.insert-h V2403 V2404 ""))

(defun shen.insert-h (V2407 V2408 V2409) (cond ((= "" V2408) V2409) ((and (shen.+string? V2408) (and (= "~" (pos V2408 0)) (and (shen.+string? (tlstr V2408)) (= "A" (pos (tlstr V2408) 0))))) (cn V2409 (shen.app V2407 (tlstr (tlstr V2408)) shen.a))) ((and (shen.+string? V2408) (and (= "~" (pos V2408 0)) (and (shen.+string? (tlstr V2408)) (= "R" (pos (tlstr V2408) 0))))) (cn V2409 (shen.app V2407 (tlstr (tlstr V2408)) shen.r))) ((and (shen.+string? V2408) (and (= "~" (pos V2408 0)) (and (shen.+string? (tlstr V2408)) (= "S" (pos (tlstr V2408) 0))))) (cn V2409 (shen.app V2407 (tlstr (tlstr V2408)) shen.s))) ((shen.+string? V2408) (shen.insert-h V2407 (tlstr V2408) (cn V2409 (pos V2408 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V2410 V2411 V2412) (cn (shen.arg->str V2410 V2412) V2411))

(defun shen.arg->str (V2418 V2419) (cond ((= V2418 (fail)) "...") ((shen.list? V2418) (shen.list->str V2418 V2419)) ((string? V2418) (shen.str->str V2418 V2419)) ((absvector? V2418) (shen.vector->str V2418 V2419)) (true (shen.atom->str V2418))))

(defun shen.list->str (V2420 V2421) (cond ((= shen.r V2421) (@s "(" (@s (shen.iter-list V2420 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V2420 V2421 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V2432 V2433 V2434) (cond ((= () V2432) "") ((= 0 V2434) "... etc") ((and (cons? V2432) (= () (tl V2432))) (shen.arg->str (hd V2432) V2433)) ((cons? V2432) (@s (shen.arg->str (hd V2432) V2433) (@s " " (shen.iter-list (tl V2432) V2433 (- V2434 1))))) (true (@s "|" (@s " " (shen.arg->str V2432 V2433))))))

(defun shen.str->str (V2439 V2440) (cond ((= shen.a V2440) V2439) (true (@s (n->string 34) (@s V2439 (n->string 34))))))

(defun shen.vector->str (V2441 V2442) (if (shen.print-vector? V2441) ((<-address V2441 0) V2441) (if (vector? V2441) (@s "<" (@s (shen.iter-vector V2441 1 V2442 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V2441 0 V2442 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V2443) (let Zero (<-address V2443 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V2444) (trap-error (do (ps V2444) true) (lambda E false)))

(defun shen.tuple (V2445) (cn "(@p " (shen.app (<-address V2445 1) (cn " " (shen.app (<-address V2445 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V2452 V2453 V2454 V2455) (cond ((= 0 V2455) "... etc") (true (let Item (trap-error (<-address V2452 V2453) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V2452 (+ V2453 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V2454) (@s (shen.arg->str Item V2454) (@s " " (shen.iter-vector V2452 (+ V2453 1) V2454 (- V2455 1)))))))))))

(defun shen.atom->str (V2456) (trap-error (str V2456) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V2457) (or (empty? V2457) (cons? V2457)))



