"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V3878 V3879) (trap-error (shen.prh V3878 V3879 0) (lambda E V3878)))

(defun shen.prh (V3883 V3884 V3885) (shen.prh V3883 V3884 (shen.write-char-and-inc V3883 V3884 V3885)))

(defun shen.write-char-and-inc (V3889 V3890 V3891) (do (write-byte (string->n (pos V3889 V3891)) V3890) (+ V3891 1)))

(defun print (V3893) (let String (shen.insert V3893 "~S") (let Print (shen.prhush String (stoutput)) V3893)))

(defun shen.prhush (V3896 V3897) (if (value *hush*) V3896 (pr V3896 V3897)))

(defun shen.mkstr (V3900 V3901) (cond ((string? V3900) (shen.mkstr-l (shen.proc-nl V3900) V3901)) (true (shen.mkstr-r (cons shen.proc-nl (cons V3900 ())) V3901))))

(defun shen.mkstr-l (V3904 V3905) (cond ((= () V3905) V3904) ((cons? V3905) (shen.mkstr-l (shen.insert-l (hd V3905) V3904) (tl V3905))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V3910 V3911) (cond ((= "" V3911) "") ((and (shen.+string? V3911) (and (= "~" (pos V3911 0)) (and (shen.+string? (tlstr V3911)) (= "A" (pos (tlstr V3911) 0))))) (cons shen.app (cons V3910 (cons (tlstr (tlstr V3911)) (cons shen.a ()))))) ((and (shen.+string? V3911) (and (= "~" (pos V3911 0)) (and (shen.+string? (tlstr V3911)) (= "R" (pos (tlstr V3911) 0))))) (cons shen.app (cons V3910 (cons (tlstr (tlstr V3911)) (cons shen.r ()))))) ((and (shen.+string? V3911) (and (= "~" (pos V3911 0)) (and (shen.+string? (tlstr V3911)) (= "S" (pos (tlstr V3911) 0))))) (cons shen.app (cons V3910 (cons (tlstr (tlstr V3911)) (cons shen.s ()))))) ((shen.+string? V3911) (shen.factor-cn (cons cn (cons (pos V3911 0) (cons (shen.insert-l V3910 (tlstr V3911)) ()))))) ((and (cons? V3911) (and (= cn (hd V3911)) (and (cons? (tl V3911)) (and (cons? (tl (tl V3911))) (= () (tl (tl (tl V3911)))))))) (cons cn (cons (hd (tl V3911)) (cons (shen.insert-l V3910 (hd (tl (tl V3911)))) ())))) ((and (cons? V3911) (and (= shen.app (hd V3911)) (and (cons? (tl V3911)) (and (cons? (tl (tl V3911))) (and (cons? (tl (tl (tl V3911)))) (= () (tl (tl (tl (tl V3911)))))))))) (cons shen.app (cons (hd (tl V3911)) (cons (shen.insert-l V3910 (hd (tl (tl V3911)))) (tl (tl (tl V3911))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V3913) (cond ((and (cons? V3913) (and (= cn (hd V3913)) (and (cons? (tl V3913)) (and (cons? (tl (tl V3913))) (and (cons? (hd (tl (tl V3913)))) (and (= cn (hd (hd (tl (tl V3913))))) (and (cons? (tl (hd (tl (tl V3913))))) (and (cons? (tl (tl (hd (tl (tl V3913)))))) (and (= () (tl (tl (tl (hd (tl (tl V3913))))))) (and (= () (tl (tl (tl V3913)))) (and (string? (hd (tl V3913))) (string? (hd (tl (hd (tl (tl V3913))))))))))))))))) (cons cn (cons (cn (hd (tl V3913)) (hd (tl (hd (tl (tl V3913)))))) (tl (tl (hd (tl (tl V3913)))))))) (true V3913)))

(defun shen.proc-nl (V3915) (cond ((= "" V3915) "") ((and (shen.+string? V3915) (and (= "~" (pos V3915 0)) (and (shen.+string? (tlstr V3915)) (= "%" (pos (tlstr V3915) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V3915))))) ((shen.+string? V3915) (cn (pos V3915 0) (shen.proc-nl (tlstr V3915)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V3918 V3919) (cond ((= () V3919) V3918) ((cons? V3919) (shen.mkstr-r (cons shen.insert (cons (hd V3919) (cons V3918 ()))) (tl V3919))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V3922 V3923) (shen.insert-h V3922 V3923 ""))

(defun shen.insert-h (V3929 V3930 V3931) (cond ((= "" V3930) V3931) ((and (shen.+string? V3930) (and (= "~" (pos V3930 0)) (and (shen.+string? (tlstr V3930)) (= "A" (pos (tlstr V3930) 0))))) (cn V3931 (shen.app V3929 (tlstr (tlstr V3930)) shen.a))) ((and (shen.+string? V3930) (and (= "~" (pos V3930 0)) (and (shen.+string? (tlstr V3930)) (= "R" (pos (tlstr V3930) 0))))) (cn V3931 (shen.app V3929 (tlstr (tlstr V3930)) shen.r))) ((and (shen.+string? V3930) (and (= "~" (pos V3930 0)) (and (shen.+string? (tlstr V3930)) (= "S" (pos (tlstr V3930) 0))))) (cn V3931 (shen.app V3929 (tlstr (tlstr V3930)) shen.s))) ((shen.+string? V3930) (shen.insert-h V3929 (tlstr V3930) (cn V3931 (pos V3930 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V3935 V3936 V3937) (cn (shen.arg->str V3935 V3937) V3936))

(defun shen.arg->str (V3945 V3946) (cond ((= V3945 (fail)) "...") ((shen.list? V3945) (shen.list->str V3945 V3946)) ((string? V3945) (shen.str->str V3945 V3946)) ((absvector? V3945) (shen.vector->str V3945 V3946)) (true (shen.atom->str V3945))))

(defun shen.list->str (V3949 V3950) (cond ((= shen.r V3950) (@s "(" (@s (shen.iter-list V3949 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V3949 V3950 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V3964 V3965 V3966) (cond ((= () V3964) "") ((= 0 V3966) "... etc") ((and (cons? V3964) (= () (tl V3964))) (shen.arg->str (hd V3964) V3965)) ((cons? V3964) (@s (shen.arg->str (hd V3964) V3965) (@s " " (shen.iter-list (tl V3964) V3965 (- V3966 1))))) (true (@s "|" (@s " " (shen.arg->str V3964 V3965))))))

(defun shen.str->str (V3973 V3974) (cond ((= shen.a V3974) V3973) (true (@s (n->string 34) (@s V3973 (n->string 34))))))

(defun shen.vector->str (V3977 V3978) (if (shen.print-vector? V3977) ((function (<-address V3977 0)) V3977) (if (vector? V3977) (@s "<" (@s (shen.iter-vector V3977 1 V3978 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V3977 0 V3978 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V3980) (let Zero (<-address V3980 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V3982) (trap-error (do (ps V3982) true) (lambda E false)))

(defun shen.tuple (V3984) (cn "(@p " (shen.app (<-address V3984 1) (cn " " (shen.app (<-address V3984 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V3995 V3996 V3997 V3998) (cond ((= 0 V3998) "... etc") (true (let Item (trap-error (<-address V3995 V3996) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V3995 (+ V3996 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V3997) (@s (shen.arg->str Item V3997) (@s " " (shen.iter-vector V3995 (+ V3996 1) V3997 (- V3998 1)))))))))))

(defun shen.atom->str (V4000) (trap-error (str V4000) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4002) (or (empty? V4002) (cons? V4002)))



