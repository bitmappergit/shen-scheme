"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V3928 V3929) (trap-error (shen.prh V3928 V3929 0) (lambda E V3928)))

(defun shen.prh (V3933 V3934 V3935) (shen.prh V3933 V3934 (shen.write-char-and-inc V3933 V3934 V3935)))

(defun shen.write-char-and-inc (V3939 V3940 V3941) (do (write-byte (string->n (pos V3939 V3941)) V3940) (+ V3941 1)))

(defun print (V3943) (let String (shen.insert V3943 "~S") (let Print (shen.prhush String (stoutput)) V3943)))

(defun shen.prhush (V3946 V3947) (if (value *hush*) V3946 (pr V3946 V3947)))

(defun shen.mkstr (V3950 V3951) (cond ((string? V3950) (shen.mkstr-l (shen.proc-nl V3950) V3951)) (true (shen.mkstr-r (cons shen.proc-nl (cons V3950 ())) V3951))))

(defun shen.mkstr-l (V3954 V3955) (cond ((= () V3955) V3954) ((cons? V3955) (shen.mkstr-l (shen.insert-l (hd V3955) V3954) (tl V3955))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V3960 V3961) (cond ((= "" V3961) "") ((and (shen.+string? V3961) (and (= "~" (pos V3961 0)) (and (shen.+string? (tlstr V3961)) (= "A" (pos (tlstr V3961) 0))))) (cons shen.app (cons V3960 (cons (tlstr (tlstr V3961)) (cons shen.a ()))))) ((and (shen.+string? V3961) (and (= "~" (pos V3961 0)) (and (shen.+string? (tlstr V3961)) (= "R" (pos (tlstr V3961) 0))))) (cons shen.app (cons V3960 (cons (tlstr (tlstr V3961)) (cons shen.r ()))))) ((and (shen.+string? V3961) (and (= "~" (pos V3961 0)) (and (shen.+string? (tlstr V3961)) (= "S" (pos (tlstr V3961) 0))))) (cons shen.app (cons V3960 (cons (tlstr (tlstr V3961)) (cons shen.s ()))))) ((shen.+string? V3961) (shen.factor-cn (cons cn (cons (pos V3961 0) (cons (shen.insert-l V3960 (tlstr V3961)) ()))))) ((and (cons? V3961) (and (= cn (hd V3961)) (and (cons? (tl V3961)) (and (cons? (tl (tl V3961))) (= () (tl (tl (tl V3961)))))))) (cons cn (cons (hd (tl V3961)) (cons (shen.insert-l V3960 (hd (tl (tl V3961)))) ())))) ((and (cons? V3961) (and (= shen.app (hd V3961)) (and (cons? (tl V3961)) (and (cons? (tl (tl V3961))) (and (cons? (tl (tl (tl V3961)))) (= () (tl (tl (tl (tl V3961)))))))))) (cons shen.app (cons (hd (tl V3961)) (cons (shen.insert-l V3960 (hd (tl (tl V3961)))) (tl (tl (tl V3961))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V3963) (cond ((and (cons? V3963) (and (= cn (hd V3963)) (and (cons? (tl V3963)) (and (cons? (tl (tl V3963))) (and (cons? (hd (tl (tl V3963)))) (and (= cn (hd (hd (tl (tl V3963))))) (and (cons? (tl (hd (tl (tl V3963))))) (and (cons? (tl (tl (hd (tl (tl V3963)))))) (and (= () (tl (tl (tl (hd (tl (tl V3963))))))) (and (= () (tl (tl (tl V3963)))) (and (string? (hd (tl V3963))) (string? (hd (tl (hd (tl (tl V3963))))))))))))))))) (cons cn (cons (cn (hd (tl V3963)) (hd (tl (hd (tl (tl V3963)))))) (tl (tl (hd (tl (tl V3963)))))))) (true V3963)))

(defun shen.proc-nl (V3965) (cond ((= "" V3965) "") ((and (shen.+string? V3965) (and (= "~" (pos V3965 0)) (and (shen.+string? (tlstr V3965)) (= "%" (pos (tlstr V3965) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V3965))))) ((shen.+string? V3965) (cn (pos V3965 0) (shen.proc-nl (tlstr V3965)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V3968 V3969) (cond ((= () V3969) V3968) ((cons? V3969) (shen.mkstr-r (cons shen.insert (cons (hd V3969) (cons V3968 ()))) (tl V3969))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V3972 V3973) (shen.insert-h V3972 V3973 ""))

(defun shen.insert-h (V3979 V3980 V3981) (cond ((= "" V3980) V3981) ((and (shen.+string? V3980) (and (= "~" (pos V3980 0)) (and (shen.+string? (tlstr V3980)) (= "A" (pos (tlstr V3980) 0))))) (cn V3981 (shen.app V3979 (tlstr (tlstr V3980)) shen.a))) ((and (shen.+string? V3980) (and (= "~" (pos V3980 0)) (and (shen.+string? (tlstr V3980)) (= "R" (pos (tlstr V3980) 0))))) (cn V3981 (shen.app V3979 (tlstr (tlstr V3980)) shen.r))) ((and (shen.+string? V3980) (and (= "~" (pos V3980 0)) (and (shen.+string? (tlstr V3980)) (= "S" (pos (tlstr V3980) 0))))) (cn V3981 (shen.app V3979 (tlstr (tlstr V3980)) shen.s))) ((shen.+string? V3980) (shen.insert-h V3979 (tlstr V3980) (cn V3981 (pos V3980 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V3985 V3986 V3987) (cn (shen.arg->str V3985 V3987) V3986))

(defun shen.arg->str (V3995 V3996) (cond ((= V3995 (fail)) "...") ((shen.list? V3995) (shen.list->str V3995 V3996)) ((string? V3995) (shen.str->str V3995 V3996)) ((absvector? V3995) (shen.vector->str V3995 V3996)) (true (shen.atom->str V3995))))

(defun shen.list->str (V3999 V4000) (cond ((= shen.r V4000) (@s "(" (@s (shen.iter-list V3999 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V3999 V4000 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V4014 V4015 V4016) (cond ((= () V4014) "") ((= 0 V4016) "... etc") ((and (cons? V4014) (= () (tl V4014))) (shen.arg->str (hd V4014) V4015)) ((cons? V4014) (@s (shen.arg->str (hd V4014) V4015) (@s " " (shen.iter-list (tl V4014) V4015 (- V4016 1))))) (true (@s "|" (@s " " (shen.arg->str V4014 V4015))))))

(defun shen.str->str (V4023 V4024) (cond ((= shen.a V4024) V4023) (true (@s (n->string 34) (@s V4023 (n->string 34))))))

(defun shen.vector->str (V4027 V4028) (if (shen.print-vector? V4027) ((function (<-address V4027 0)) V4027) (if (vector? V4027) (@s "<" (@s (shen.iter-vector V4027 1 V4028 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V4027 0 V4028 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V4030) (let Zero (<-address V4030 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V4032) (trap-error (do (ps V4032) true) (lambda E false)))

(defun shen.tuple (V4034) (cn "(@p " (shen.app (<-address V4034 1) (cn " " (shen.app (<-address V4034 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V4045 V4046 V4047 V4048) (cond ((= 0 V4048) "... etc") (true (let Item (trap-error (<-address V4045 V4046) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V4045 (+ V4046 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4047) (@s (shen.arg->str Item V4047) (@s " " (shen.iter-vector V4045 (+ V4046 1) V4047 (- V4048 1)))))))))))

(defun shen.atom->str (V4050) (trap-error (str V4050) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4052) (or (empty? V4052) (cons? V4052)))



